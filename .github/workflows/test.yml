# Compile and build binaries
#
# For updated Intel OneAPI URLs, see:
# https://github.com/oneapi-src/oneapi-ci/blob/master/.github/workflows/build_all.yml

name: Run tests

on:
  workflow_dispatch:
  push:

env:
  LINUX_BASEKIT_URL: https://registrationcenter-download.intel.com/akdlm/IRC_NAS/ac050ae7-da93-4108-823d-4334de3f4ee8/intel-oneapi-base-toolkit-2025.1.2.9_offline.sh


jobs:
#------------------------------------------------

  build_linux_dyn_openblas:
    name: Run tests on Linux (openblas)
    runs-on: ubuntu-latest
    env:
      BRANCH_NAME: ${{ github.head_ref || github.ref_name }} 
      PKGS: >
        libxerces-c-dev xsdcxx libboost-system-dev libboost-filesystem-dev libboost-timer-dev
        libboost-thread-dev libboost-program-options-dev libopenblas-dev liblapacke-dev gmt ghostscript

    steps:

      - name: Install dependencies
        shell: bash
        run: |
          sudo apt-get install -y ${{ env.PKGS }}

      - name: Check branch name
        shell: bash
        run: echo ${{ env.BRANCH_NAME }}
          
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.BRANCH_NAME }}

      - name: Build with CMake
        run: |
          cmake dynadjust -DBUILD_TESTING=ON
          make -j2
          ls
          
      - name: Run tests
        run: |
          set +e
          ctest --verbose --output-on-failure 2>&1 | tee ctest_output.log
          CTEST_EXIT_CODE=${PIPESTATUS[0]}
          echo "CTEST_EXIT_CODE=$CTEST_EXIT_CODE" >> $GITHUB_ENV
          exit $CTEST_EXIT_CODE

      - name: Parse test results and create annotations
        if: always()
        shell: bash
        run: |
          if [ -f ctest_output.log ]; then
            # Extract summary information
            TOTAL_TESTS=$(grep -o "[0-9]\+ tests passed" ctest_output.log | grep -o "[0-9]\+" | head -1 || echo "0")
            FAILED_TESTS=$(grep -o "[0-9]\+ tests failed" ctest_output.log | grep -o "[0-9]\+" | head -1 || echo "0")
            PASSED_TESTS=$((TOTAL_TESTS + FAILED_TESTS - FAILED_TESTS))
            
            if [ "$FAILED_TESTS" -gt 0 ]; then
              echo "::error title=Test Summary::$FAILED_TESTS out of $((TOTAL_TESTS + FAILED_TESTS)) tests failed"
              
              # Extract failed test details
              grep -A 1000 "The following tests FAILED:" ctest_output.log | grep "^ *[0-9]\+ -" | while read line; do
                TEST_NUM=$(echo "$line" | grep -o "^ *[0-9]\+" | tr -d ' ')
                TEST_NAME=$(echo "$line" | sed 's/^ *[0-9]\+ - \([^(]*\).*/\1/' | tr -d ' ')
                FAILURE_TYPE=$(echo "$line" | grep -o "([^)]*)" | tr -d '()' || echo "Failed")
                echo "::error title=Test Failed::Test $TEST_NUM ($TEST_NAME) - $FAILURE_TYPE"
              done
            else
              echo "::notice title=Test Summary::All tests passed successfully!"
            fi
          else
            echo "::error title=Test Error::Could not find ctest output file"
          fi
          
#------------------------------------------------

  build_linux_dyn_mkl:
    name: Run tests on Linux (mkl)
    runs-on: ubuntu-latest
    env:
      BRANCH_NAME: ${{ github.head_ref || github.ref_name }} 
      PKGS: >
        libxerces-c-dev xsdcxx libboost-system-dev libboost-filesystem-dev libboost-timer-dev
        libboost-thread-dev libboost-program-options-dev gmt ghostscript

    steps:

      - name: Generate cache triggers
        shell: bash
        run: |
          echo ONEAPI_HASH=$(echo "${LINUX_BASEKIT_URL}" | md5sum | cut -f 1 -d" ") >> $GITHUB_ENV

      - name: Install dependencies
        shell: bash
        run: |
          sudo apt-get install -y ${{ env.PKGS }}

      - name: Cache Intel OneAPI
        id: cache-oneapi
        uses: actions/cache@v4
        with:
          path: /opt/intel
          key: intel-oneapi-linux-${{ env.ONEAPI_HASH }}

      - name: Install Intel OneAPI
        if: steps.cache-oneapi.outputs.cache-hit != 'true'
        run: |
          curl -L $LINUX_BASEKIT_URL -o install.sh
          sudo sh install.sh -a --action install --components intel.oneapi.lin.mkl.devel --eula=accept -s

      - name: Check branch name
        shell: bash
        run: echo ${{ env.BRANCH_NAME }}

      - uses: actions/checkout@v4
        with:
          ref: ${{ env.BRANCH_NAME }}

      - name: Build with CMake
        run: |
          source /opt/intel/oneapi/setvars.sh
          cmake dynadjust -DBUILD_TESTING=ON
          make -j2
          
      - name: Run tests
        run: |
          set +e
          ctest --verbose --output-on-failure 2>&1 | tee ctest_output.log
          CTEST_EXIT_CODE=${PIPESTATUS[0]}
          echo "CTEST_EXIT_CODE=$CTEST_EXIT_CODE" >> $GITHUB_ENV
          exit $CTEST_EXIT_CODE

      - name: Parse test results and create annotations
        if: always()
        shell: bash
        run: |
          if [ -f ctest_output.log ]; then
            # Extract summary information
            TOTAL_TESTS=$(grep -o "[0-9]\+ tests passed" ctest_output.log | grep -o "[0-9]\+" | head -1 || echo "0")
            FAILED_TESTS=$(grep -o "[0-9]\+ tests failed" ctest_output.log | grep -o "[0-9]\+" | head -1 || echo "0")
            PASSED_TESTS=$((TOTAL_TESTS + FAILED_TESTS - FAILED_TESTS))
            
            if [ "$FAILED_TESTS" -gt 0 ]; then
              echo "::error title=Test Summary::$FAILED_TESTS out of $((TOTAL_TESTS + FAILED_TESTS)) tests failed"
              
              # Extract failed test details
              grep -A 1000 "The following tests FAILED:" ctest_output.log | grep "^ *[0-9]\+ -" | while read line; do
                TEST_NUM=$(echo "$line" | grep -o "^ *[0-9]\+" | tr -d ' ')
                TEST_NAME=$(echo "$line" | sed 's/^ *[0-9]\+ - \([^(]*\).*/\1/' | tr -d ' ')
                FAILURE_TYPE=$(echo "$line" | grep -o "([^)]*)" | tr -d '()' || echo "Failed")
                echo "::error title=Test Failed::Test $TEST_NUM ($TEST_NAME) - $FAILURE_TYPE"
              done
            else
              echo "::notice title=Test Summary::All tests passed successfully!"
            fi
          else
            echo "::error title=Test Error::Could not find ctest output file"
          fi

