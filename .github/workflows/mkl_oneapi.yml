# Test script 

name: Testing

on:
  workflow_dispatch:

env:
  # VCPKG_PACKAGES: xerces-c:x86-windows-static curl:x86-windows-static
  #VCPKG_PACKAGES: curl xerces-c
  VCPKG_PACKAGES: boost-geometry boost-process boost-iostreams boost-spirit boost-system boost-filesystem boost-timer boost-thread boost-program-options boost-interprocess xerces-c vcpkg-tool-ninja
  VCPKG_INSTALLATION_ROOT: C:/vcpkg
  VCPKG_BINARY_SOURCES: "clear"
  
  # See URLs at https://github.com/oneapi-src/oneapi-ci/blob/master/.github/workflows/build_all.yml
  WINDOWS_BASEKIT_URL: https://registrationcenter-download.intel.com/akdlm/IRC_NAS/487fd8c3-a3d8-4c22-a903-f8d54c2c57be/intel-oneapi-base-toolkit-2025.1.0.650_offline.exe
  
jobs:
  build_windows:
    runs-on: windows-latest
    steps:

      - name: Generate cache triggers
        shell: bash
        run: |
          echo VCPKG_HASH=$(echo "${VCPKG_PACKAGES}" | sed "s/ /_/g" | md5sum | cut -f 1 -d" ") >> $GITHUB_ENV
          echo ONEAPI_HASH=$(echo "${WINDOWS_BASEKIT_URL}" | md5sum | cut -f 1 -d" ") >> $GITHUB_ENV
          
      - name: Cache vcpkg
        id: cache-vcpkg
        uses: actions/cache@v4
        with:
          path: ${{ env.VCPKG_INSTALLATION_ROOT }}/installed
          key: vcpkg-${{ runner.os }}-${{ env.VCPKG_HASH }}

      - name: Cache Intel OneAPI
        id: cache-oneapi
        uses: actions/cache@v4
        with:
          path: C:\Program Files (x86)\Intel\oneAPI
          key: intel-oneapi-${{ env.ONEAPI_HASH }}

      # - name: Prepare vcpkg
      #   shell: powershell
      #   run: |
      #     # See https://learn.microsoft.com/en-us/vcpkg/get_started/get-started?pivots=shell-powershell#1---set-up-vcpkg
      #     if (-not (Test-Path '${{ env.VCPKG_ROOT }}/vcpkg.exe')) {
      #       git clone https://github.com/microsoft/vcpkg ${{ env.VCPKG_ROOT }}
      #       ${{ env.VCPKG_ROOT }}/bootstrap-vcpkg.bat -disableMetrics
      #     } else {
      #       Write-Host "vcpkg.exe already exists; skipping bootstrap."
      #     }
          
      - name: Install vcpkg prerequisites
        if: steps.cache-vcpkg.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          vcpkg.exe install ${{ env.VCPKG_PACKAGES }} --triplet=x64-windows
          Remove-Item -Recurse -Force ${{ env.VCPKG_INSTALLATION_ROOT }}/.git
          Remove-Item -Recurse -Force ${{ env.VCPKG_INSTALLATION_ROOT }}/buildtrees
          Remove-Item -Recurse -Force ${{ env.VCPKG_INSTALLATION_ROOT }}/downloads
          Remove-Item -Recurse -Force ${{ env.VCPKG_INSTALLATION_ROOT }}/.github
          Remove-Item -Recurse -Force ${{ env.VCPKG_INSTALLATION_ROOT }}/docs
      
      - name: List installed packages
        shell: powershell
        run: vcpkg.exe list

      # - name: Disk usage installed packages
      #   shell: bash
      #   run: |
      #     echo "vcpkg:"
      #     du -h -d1 "${{ env.VCPKG_INSTALLATION_ROOT }}" | sort -h
      #     echo ""
      #     echo "Intel oneAPI:"
      #     du -h -d5 "C:\Program Files (x86)\Intel\oneAPI/mkl" | sort -h
      #     echo ""
      #     ls -l "${{ env.VCPKG_INSTALLATION_ROOT }}/installed/x64-windows/include/boost/"

      - name: Install Intel OneAPI
        if: steps.cache-oneapi.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          Write-Host "Installing Intel OneAPI..."
          $url = $env:WINDOWS_BASEKIT_URL
          $components = "intel.oneapi.win.mkl.devel"
          $tempExe = Join-Path $env:TEMP "webimage.exe"
          
          Write-Host "Downloading installer from $url..."
          curl.exe -L $url -o $tempExe
          
          Write-Host "Extracting installer..."
          $installerArgs = "-s -x -f webimage_extracted --log extract.log"
          $proc = Start-Process -FilePath $tempExe -ArgumentList $installerArgs -NoNewWindow -Wait -PassThru
          Remove-Item $tempExe -Force
          
          $bootstrapperPath = Join-Path -Path (Join-Path $PWD "webimage_extracted") "bootstrapper.exe"
          if (-Not (Test-Path $bootstrapperPath)) {
              throw "Bootstrapper not found at $bootstrapperPath"
          }

          Write-Host "Listing available components..."
          $procBootstrap = Start-Process -FilePath $bootstrapperPath -ArgumentList "--list-components" -NoNewWindow -Wait -PassThru -RedirectStandardOutput components
          get-content components

          Write-Host "Running bootstrapper..."
          $bootstrapArgs = "-s --action install --components=$components --eula=accept -p=NEED_VS2017_INTEGRATION=0 -p=NEED_VS2019_INTEGRATION=0 -p=NEED_VS2022_INTEGRATION=0 --log-dir=."
          $procBootstrap = Start-Process -FilePath $bootstrapperPath -ArgumentList $bootstrapArgs -NoNewWindow -Wait -PassThru
          if ($procBootstrap.ExitCode -ne 0) {
              throw "Bootstrapper installation failed with exit code $($procBootstrap.ExitCode)"
          }          
          Remove-Item -Recurse -Force "webimage_extracted"
          
      - uses: actions/checkout@v4
        with:
          ref: test-workflow
          path: "./src"

      - name: Download and install xsd
        working-directory: "./src"
        shell: bash
        run: |
          curl.exe -L -O https://www.codesynthesis.com/download/xsd/4.2/libxsd-4.2.0.tar.gz
          tar zxvf libxsd-4.2.0.tar.gz
          
      - name: Build with CMake
        working-directory: "./src"
        shell: cmd
        run: |
          vcpkg.exe integrate install
          call "C:\Program Files (x86)\Intel\oneAPI\compiler\2025.1\env\vars.bat"
          call "C:\Program Files (x86)\Intel\oneAPI\mkl\2025.1\env\vars.bat"
          set XSDROOT=%cd%\libxsd-4.2.0
          set VPKG_INCLUDE=${{ env.VCPKG_INSTALLATION_ROOT }}\installed\x64-windows\include
          set INCLUDE=%XSDROOT%;%VPKG_INCLUDE%;%INCLUDE%
          set UseEnv=true
          cmake -D USE_MKL=ON -D CMAKE_TOOLCHAIN_FILE"=${{ env.VCPKG_INSTALLATION_ROOT }}/scripts/buildsystems/vcpkg.cmake" -G "Visual Studio 17 2022" -A x64 dynadjust
          cmake --build . --config Release

      - name: Collate artifacts
        shell: bash
        run: |
          mkdir -p release
          mkdir -p release/DynAdjust-Windows
          cp ./src/dynadjust/dnageoid/Release/*.dll ./release/DynAdjust-Windows/
          cp ./src/dynadjust/dnageoid/Release/*.exe ./release/DynAdjust-Windows/
          cp ./src/dynadjust/dnageoidwrapper/Release/*.dll ./release/DynAdjust-Windows/
          cp ./src/dynadjust/dnageoidwrapper/Release/*.exe ./release/DynAdjust-Windows/
          cp ./src/dynadjust/dnaimport/Release/*.dll release/DynAdjust-Windows/
          cp ./src/dynadjust/dnaimport/Release/*.exe release/DynAdjust-Windows/
          cp ./src/dynadjust/dnaimportwrapper/Release/*.dll ./release/DynAdjust-Windows/
          cp ./src/dynadjust/dnaimportwrapper/Release/*.exe ./release/DynAdjust-Windows/
          cp ./src/dynadjust/dnaplot/Release/*.dll ./release/DynAdjust-Windows/
          cp ./src/dynadjust/dnaplot/Release/*.exe ./release/DynAdjust-Windows/
          cp ./src/dynadjust/dnaplotwrapper/Release/*.dll ./release/DynAdjust-Windows/
          cp ./src/dynadjust/dnaplotwrapper/Release/*.exe ./release/DynAdjust-Windows/
          cp ./src/dynadjust/dnareftran/Release/*.dll ./release/DynAdjust-Windows/
          cp ./src/dynadjust/dnareftran/Release/*.exe ./release/DynAdjust-Windows/
          cp ./src/dynadjust/dnareftranwrapper/Release/*.dll ./release/DynAdjust-Windows/
          cp ./src/dynadjust/dnareftranwrapper/Release/*.exe ./release/DynAdjust-Windows/
          cp ./src/dynadjust/dnasegment/Release/*.dll ./release/DynAdjust-Windows/
          cp ./src/dynadjust/dnasegment/Release/*.exe ./release/DynAdjust-Windows/
          cp ./src/dynadjust/dnasegmentwrapper/Release/*.dll ./release/DynAdjust-Windows/
          cp ./src/dynadjust/dnasegmentwrapper/Release/*.exe ./release/DynAdjust-Windows/
          cp ./src/dynadjust/dnaadjust/Release/*.dll ./release/DynAdjust-Windows/
          cp ./src/dynadjust/dnaadjust/Release/*.exe ./release/DynAdjust-Windows/
          cp ./src/dynadjust/dnaadjustwrapper/Release/*.dll ./release/DynAdjust-Windows/
          cp ./src/dynadjust/dnaadjustwrapper/Release/*.exe ./release/DynAdjust-Windows/
          mv ./release/DynAdjust-Windows/geoid.exe   ./release/DynAdjust-Windows/dnageoid.exe
          mv ./release/DynAdjust-Windows/import.exe  ./release/DynAdjust-Windows/dnaimport.exe
          mv ./release/DynAdjust-Windows/plot.exe    ./release/DynAdjust-Windows/dnaplot.exe
          mv ./release/DynAdjust-Windows/reftran.exe ./release/DynAdjust-Windows/dnareftran.exe
          mv ./release/DynAdjust-Windows/segment.exe ./release/DynAdjust-Windows/dnasegment.exe

      - uses: actions/upload-artifact@v4
        with:
          name: windows-dynlibs
          path: ./release/

        
      # - name: Find solution file
      #   working-directory: "./src"
      #   id: find_sln
      #   shell: bash
      #   run: echo "sln=$(find . -type f -name "*.sln" | head -n 1)" >> "$GITHUB_OUTPUT"

      # - name: Build DynAdjust
      #   working-directory: "./src"
      #   # run: msbuild ${{ steps.find_sln.outputs.sln }} -t:rebuild -verbosity:diag -property:Configuration=Release          
      #   run: msbuild ${{ steps.find_sln.outputs.sln }} -t:rebuild -property:Configuration=Release          

      # - name: Build DynAdjust
      #   shell: cmd
      #   working-directory: "./src"
      #   run: |
      #     ..\vcpkg\vcpkg.exe integrate install
      #     rem %comspec% /k "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
      #     rem set INCLUDE="C:\Program Files (x86)\Windows Kits\10\Include";"C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0";%INCLUDE%
          
      #     %comspec% /k "C:\Program Files (x86)\Intel\oneAPI\mkl\2025.1\env\vars.bat"

      #     set PATH=%ProgramFiles%\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin;%PATH%
      #     set MKL_INC=%MKLROOT%\include
      #     set DEPS_DIR=${{ env.VCPKG_ROOT }}\installed\x64-windows\include
      #     set XSD_DIR=%GITHUB_WORKSPACE%\%CS_XSD_INSTALL_FOLDER%
      #     set INCLUDE=%DEPS_DIR%;%XSD_DIR%;%MKL_INC%;%INCLUDE%
      #     set UseEnv=true
          
      #     msbuild /p:Configuration=Release /p:Platform=x64 /p:PlatformToolset=v143 ${{ steps.find_sln.outputs.sln }}
      
