# Test script 
#
# TODO:
# VCPKG_PACKAGES: xerces-c:x86-windows-static curl:x86-windows-static
# See URLs at https://github.com/oneapi-src/oneapi-ci/blob/master/.github/workflows/build_all.yml

name: Testing

on:
  workflow_dispatch:

env:
  WINDOWS_BASEKIT_URL: >
    https://registrationcenter-download.intel.com/akdlm/IRC_NAS/
    487fd8c3-a3d8-4c22-a903-f8d54c2c57be/intel-oneapi-base-toolkit-2025.1.0.650_offline.exe
  VCPKG_PACKAGES: >
    boost-geometry boost-process boost-iostreams boost-spirit boost-system boost-filesystem
    boost-timer boost-thread boost-program-options boost-interprocess xerces-c vcpkg-tool-ninja
  VCPKG_INSTALLATION_ROOT: C:/vcpkg
  VCPKG_BINARY_SOURCES: "clear"

jobs:

  build_mac:
    runs-on: macos-15
    steps:

      - name: Install dependencies
        shell: bash
        run: brew install boost xerces-c xsd

      - uses: actions/checkout@v4
        with:
          ref: test-workflow

      - name: Build with CMake
        run: |
          cmake dynadjust
          make -j
          ls

  build_linux:
    runs-on: ubuntu-latest
    steps:

      - name: Install dependencies
        shell: bash
        run: sudo apt-get install -y libxerces-c-dev xsdcxx libboost-system-dev libboost-filesystem-dev libboost-timer-dev libboost-thread-dev libboost-program-options-dev

      - uses: actions/checkout@v4
        with:
          ref: test-workflow

      - name: Download and install xsd
        shell: bash
        run: |
          curl -L -O https://www.codesynthesis.com/download/xsd/4.2/libxsd-4.2.0.tar.gz
          tar zxvf libxsd-4.2.0.tar.gz

      - name: Build with CMake
        run: |
          export CPLUS_INCLUDE_PATH=./libxsd-4.2.0/:$CPLUS_INCLUDE_PATH
          cmake dynadjust
          make -j
          ls

  build_windows:
    runs-on: windows-latest
    steps:

      - name: Generate cache triggers
        shell: bash
        run: |
          echo VCPKG_HASH=$(echo "${VCPKG_PACKAGES}" | sed "s/ /_/g" | md5sum | cut -f 1 -d" ") >> $GITHUB_ENV
          echo ONEAPI_HASH=$(echo "${WINDOWS_BASEKIT_URL}" | md5sum | cut -f 1 -d" ") >> $GITHUB_ENV

      - name: Cache vcpkg
        id: cache-vcpkg
        uses: actions/cache@v4
        with:
          path: ${{ env.VCPKG_INSTALLATION_ROOT }}/installed
          key: vcpkg-${{ runner.os }}-${{ env.VCPKG_HASH }}

      - name: Cache Intel OneAPI
        id: cache-oneapi
        uses: actions/cache@v4
        with:
          path: C:\Program Files (x86)\Intel\oneAPI
          key: intel-oneapi-${{ env.ONEAPI_HASH }}

      - name: Install vcpkg prerequisites
        if: steps.cache-vcpkg.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          vcpkg.exe install ${{ env.VCPKG_PACKAGES }} --triplet=x64-windows
          Remove-Item -Recurse -Force ${{ env.VCPKG_INSTALLATION_ROOT }}/.git
          Remove-Item -Recurse -Force ${{ env.VCPKG_INSTALLATION_ROOT }}/buildtrees
          Remove-Item -Recurse -Force ${{ env.VCPKG_INSTALLATION_ROOT }}/downloads
          Remove-Item -Recurse -Force ${{ env.VCPKG_INSTALLATION_ROOT }}/.github
          Remove-Item -Recurse -Force ${{ env.VCPKG_INSTALLATION_ROOT }}/docs

      - name: List installed packages
        shell: powershell
        run: vcpkg.exe list

#      - name: Install Intel OneAPI
#        if: steps.cache-oneapi.outputs.cache-hit != 'true'
#        shell: powershell
#        run: |
#          Write-Host "Installing Intel OneAPI..."
#          $url = $env:WINDOWS_BASEKIT_URL
#          $components = "intel.oneapi.win.mkl.devel"
#          $tempExe = Join-Path $env:TEMP "webimage.exe"
#
#          Write-Host "Downloading installer from $url..."
#          curl.exe -L $url -o $tempExe
#
#          Write-Host "Extracting installer..."
#          $installerArgs = "-s -x -f webimage_extracted --log extract.log"
#          $proc = Start-Process -FilePath $tempExe -ArgumentList $installerArgs -NoNewWindow -Wait -PassThru
#          Remove-Item $tempExe -Force
#
#          $bootstrapperPath = Join-Path -Path (Join-Path $PWD "webimage_extracted") "bootstrapper.exe"
#          if (-Not (Test-Path $bootstrapperPath)) {
#            throw "Bootstrapper not found at $bootstrapperPath"
#        }
#
#        Write-Host "Listing available components..."
#        $procBootstrap = Start-Process -FilePath $bootstrapperPath -ArgumentList `
#                         "--list-components" -NoNewWindow -Wait -PassThru `
#                         -RedirectStandardOutput components
#        get-content components
#
#        Write-Host "Running bootstrapper..."
#        $bootstrapArgs = "-s --action install --components=$components --eula=accept -p=NEED_VS2017_INTEGRATION=0 -p=NEED_VS2019_INTEGRATION=0 -p=NEED_VS2022_INTEGRATION=0 --log-dir=."
#        $procBootstrap = Start-Process -FilePath $bootstrapperPath -ArgumentList $bootstrapArgs -NoNewWindow -Wait -PassThru
#        if ($procBootstrap.ExitCode -ne 0) {
#          throw "Bootstrapper installation failed with exit code $($procBootstrap.ExitCode)"
#        }          
#        Remove-Item -Recurse -Force "webimage_extracted"
#
#      - uses: actions/checkout@v4
#        with:
#          ref: test-workflow
#          path: "./src"
#
#      - name: Download and install xsd
#        working-directory: "./src"
#        shell: bash
#        run: |
#          curl.exe -L -O https://www.codesynthesis.com/download/xsd/4.2/libxsd-4.2.0.tar.gz
#          tar zxvf libxsd-4.2.0.tar.gz
#
#      - name: Build with CMake
#        working-directory: "./src"
#        shell: cmd
#        run: |
#          vcpkg.exe integrate install
#          call "C:\Program Files (x86)\Intel\oneAPI\compiler\2025.1\env\vars.bat"
#          call "C:\Program Files (x86)\Intel\oneAPI\mkl\2025.1\env\vars.bat"
#          set XSDROOT=%cd%\libxsd-4.2.0
#          set VPKG_INCLUDE=${{ env.VCPKG_INSTALLATION_ROOT }}\installed\x64-windows\include
#          set INCLUDE=%XSDROOT%;%VPKG_INCLUDE%;%INCLUDE%
#          set UseEnv=true
#          cmake -D USE_MKL=ON -D CMAKE_TOOLCHAIN_FILE"=${{ env.VCPKG_INSTALLATION_ROOT }}/scripts/buildsystems/vcpkg.cmake" -G "Visual Studio 17 2022" -A x64 dynadjust
#          cmake --build . --config Release
#          dir
#
#      - name: Collate artifacts
#        shell: bash
#        run: |
#          # collating artifacts
#          mkdir -p release
#          mkdir -p release/DynAdjust-Windows
#          echo "Copying files into release folder"
#          cp -f ./src/dynadjust/dnageoid/Release/*.dll ./release/DynAdjust-Windows/
#          cp -f ./src/dynadjust/dnageoidwrapper/Release/*.dll ./release/DynAdjust-Windows/
#          cp -f ./src/dynadjust/dnageoidwrapper/Release/*.exe ./release/DynAdjust-Windows/
#          cp -f ./src/dynadjust/dnaimport/Release/*.dll release/DynAdjust-Windows/
#          cp -f ./src/dynadjust/dnaimportwrapper/Release/*.dll ./release/DynAdjust-Windows/
#          cp -f ./src/dynadjust/dnaimportwrapper/Release/*.exe ./release/DynAdjust-Windows/
#          cp -f ./src/dynadjust/dnaplot/Release/*.dll ./release/DynAdjust-Windows/
#          cp -f ./src/dynadjust/dnaplotwrapper/Release/*.dll ./release/DynAdjust-Windows/
#          cp -f ./src/dynadjust/dnaplotwrapper/Release/*.exe ./release/DynAdjust-Windows/
#          cp -f ./src/dynadjust/dnareftran/Release/*.dll ./release/DynAdjust-Windows/
#          cp -f ./src/dynadjust/dnareftranwrapper/Release/*.dll ./release/DynAdjust-Windows/
#          cp -f ./src/dynadjust/dnareftranwrapper/Release/*.exe ./release/DynAdjust-Windows/
#          cp -f ./src/dynadjust/dnasegment/Release/*.dll ./release/DynAdjust-Windows/
#          cp -f ./src/dynadjust/dnasegmentwrapper/Release/*.dll ./release/DynAdjust-Windows/
#          cp -f ./src/dynadjust/dnasegmentwrapper/Release/*.exe ./release/DynAdjust-Windows/
#          cp -f ./src/dynadjust/dnaadjust/Release/*.dll ./release/DynAdjust-Windows/
#          cp -f ./src/dynadjust/dnaadjustwrapper/Release/*.dll ./release/DynAdjust-Windows/
#          cp -f ./src/dynadjust/dnaadjustwrapper/Release/*.exe ./release/DynAdjust-Windows/
#          echo "Renaming files to add dna prefix"
#          mv ./release/DynAdjust-Windows/adjust.exe   ./release/DynAdjust-Windows/dnaadjust.exe
#          mv ./release/DynAdjust-Windows/geoid.exe   ./release/DynAdjust-Windows/dnageoid.exe
#          mv ./release/DynAdjust-Windows/import.exe  ./release/DynAdjust-Windows/dnaimport.exe
#          mv ./release/DynAdjust-Windows/plot.exe    ./release/DynAdjust-Windows/dnaplot.exe
#          mv ./release/DynAdjust-Windows/reftran.exe ./release/DynAdjust-Windows/dnareftran.exe
#          mv ./release/DynAdjust-Windows/segment.exe ./release/DynAdjust-Windows/dnasegment.exe
#
#      - uses: actions/upload-artifact@v4
#        with:
#          name: windows-dynlibs
#          path: ./release/
