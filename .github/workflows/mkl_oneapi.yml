# Test script 


name: Testing

on:
  workflow_dispatch:

env:
  VCPKG_PACKAGES: xerces-c:x86-windows-static curl:x86-windows-static
  # VCPKG_PACKAGES: boost-process boost-iostreams boost-spirit boost-system boost-filesystem boost-timer boost-thread boost-program-options openblas 7zip xerces-c curl
  
  # See URLs at https://github.com/oneapi-src/oneapi-ci/blob/master/.github/workflows/build_all.yml
  WINDOWS_BASEKIT_URL: https://registrationcenter-download.intel.com/akdlm/IRC_NAS/487fd8c3-a3d8-4c22-a903-f8d54c2c57be/intel-oneapi-base-toolkit-2025.1.0.650_offline.exe
  
  VCPKG_ROOT: ./vcpkg

jobs:
  build_windows:
    runs-on: windows-latest

    steps:
      - name: Set number of cores
        shell: bash
        run: |
          # WMIC CPU Get -Format:List
          WMIC CPU Get NumberOfLogicalProcessors | head -2 | tail -1 > ncores
          echo "NCORES=$(cat ncores)" >> $GITHUB_ENV
          echo "VCPKG_MAX_CONCURRENCY=$(cat ncores)" >> $GITHUB_ENV

      - name: Generate cache triggers
        shell: bash
        run: |
          echo VCPKG_HASH=$(echo "${VCPKG_PACKAGES}" | sed "s/ /_/g" | md5sum | cut -f 1 -d" ") >> $GITHUB_ENV
          echo ONEAPI_HASH=$(echo "${WINDOWS_BASEKIT_URL}" | md5sum | cut -f 1 -d" ") >> $GITHUB_ENV
          
      - name: Cache vcpkg
        id: cache-vcpkg
        uses: actions/cache@v3
        with:
          path: |
            ./vcpkg/vcpkg.exe
            ./vcpkg/installed
            # ./vcpkg/downloads
          key: ${{ runner.os }}-${{ env.VCPKG_HASH }}

      - name: Prepare vcpkg
        shell: powershell
        run: |
          # https://learn.microsoft.com/en-us/vcpkg/get_started/get-started?pivots=shell-powershell#1---set-up-vcpkg
          if (-not (Test-Path './vcpkg/vcpkg.exe')) {
            git clone https://github.com/microsoft/vcpkg ./vcpkg
            ./vcpkg/bootstrap-vcpkg.bat -disableMetrics
          } else {
            Write-Host "vcpkg.exe already exists; skipping bootstrap."
          }
          
      - name: Install vcpkg prerequisites
        if: steps.cache-vcpkg.outputs.cache-hit != 'true'
        shell: cmd
        run: |
          echo Installing packages: %VCPKG_PACKAGES%
          .\vcpkg\vcpkg.exe install %VCPKG_PACKAGES% --triplet=x64-windows
      
      - name: List installed packages
        shell: cmd
        run: |
          .\vcpkg\vcpkg.exe list

      - name: Integrate vpkg
        shell: cmd
        run: |
          .\vcpkg\vcpkg.exe integrate install

      - name: Cache Intel OneAPI
        id: cache-oneapi
        uses: actions/cache@v3
        with:
          path: |
            C:\Program Files (x86)\Intel\oneAPI
          key: ${{ env.ONEAPI_HASH }}

      - name: Install Intel OneAPI
        if: steps.cache-oneapi.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          Write-Host "Installing Intel OneAPI..."
          $url = $env:WINDOWS_BASEKIT_URL
          $components = "intel.oneapi.win.mkl.devel"
          $tempExe = Join-Path $env:TEMP "webimage.exe"
          
          Write-Host "Downloading installer from $url..."
          curl.exe -L $url -o $tempExe
          
          Write-Host "Extracting installer..."
          $installerArgs = "-s -x -f webimage_extracted --log extract.log"
          $proc = Start-Process -FilePath $tempExe -ArgumentList $installerArgs -NoNewWindow -Wait -PassThru
          Remove-Item $tempExe -Force
          
          $bootstrapperPath = Join-Path -Path (Join-Path $PWD "webimage_extracted") "bootstrapper.exe"
          if (-Not (Test-Path $bootstrapperPath)) {
              throw "Bootstrapper not found at $bootstrapperPath"
          }

          Write-Host "Listing available components..."
          $procBootstrap = Start-Process -FilePath $bootstrapperPath -ArgumentList "--list-components" -NoNewWindow -Wait -PassThru -RedirectStandardOutput components
          get-content components

          Write-Host "Running bootstrapper..."
          $bootstrapArgs = "-s --action install --components=$components --eula=accept -p=NEED_VS2017_INTEGRATION=0 -p=NEED_VS2019_INTEGRATION=0 -p=NEED_VS2022_INTEGRATION=0 --log-dir=."
          $procBootstrap = Start-Process -FilePath $bootstrapperPath -ArgumentList $bootstrapArgs -NoNewWindow -Wait -PassThru
          if ($procBootstrap.ExitCode -ne 0) {
              throw "Bootstrapper installation failed with exit code $($procBootstrap.ExitCode)"
          }          
          Remove-Item -Recurse -Force "webimage_extracted"
          
          TREE "C:\Program Files (x86)\Intel\oneAPI" /F
