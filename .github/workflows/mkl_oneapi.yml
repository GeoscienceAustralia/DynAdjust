# Test script 

name: Testing

on:
  workflow_dispatch:

env:
  # VCPKG_PACKAGES: xerces-c:x86-windows-static curl:x86-windows-static
  #VCPKG_PACKAGES: curl xerces-c
  VCPKG_PACKAGES: boost-process boost-iostreams boost-system boost-filesystem boost-timer boost-thread boost-program-options xerces-c
  VCPKG_BINARY_SOURCES: "clear"
  VCPKG_ROOT: ./vcpkg
  
  # See URLs at https://github.com/oneapi-src/oneapi-ci/blob/master/.github/workflows/build_all.yml
  WINDOWS_BASEKIT_URL: https://registrationcenter-download.intel.com/akdlm/IRC_NAS/487fd8c3-a3d8-4c22-a903-f8d54c2c57be/intel-oneapi-base-toolkit-2025.1.0.650_offline.exe
  
jobs:
  build_windows:
    runs-on: windows-latest
    steps:

      - name: Set number of cores
        shell: bash
        run: |
          # Get number of cores
          WMIC CPU Get NumberOfLogicalProcessors | head -2 | tail -1 > ncores
          echo "NCORES=$(cat ncores)" >> $GITHUB_ENV
          echo "VCPKG_MAX_CONCURRENCY=$(cat ncores)" >> $GITHUB_ENV

      - name: Generate cache triggers
        shell: bash
        run: |
          echo VCPKG_HASH=$(echo "${VCPKG_PACKAGES}" | sed "s/ /_/g" | md5sum | cut -f 1 -d" ") >> $GITHUB_ENV
          echo ONEAPI_HASH=$(echo "${WINDOWS_BASEKIT_URL}" | md5sum | cut -f 1 -d" ") >> $GITHUB_ENV
          
      - name: Cache restore vcpkg
        id: cache-vcpkg
        uses: actions/cache@v4
        with:
          path: ${{ env.VCPKG_ROOT }}
          key: vcpkg-${{ runner.os }}-${{ env.VCPKG_HASH }}

      - name: Cache restore Intel OneAPI
        id: cache-oneapi
        uses: actions/cache@v4
        with:
          path: C:\Program Files (x86)\Intel\oneAPI
          key: ${{ env.ONEAPI_HASH }}

      - name: Prepare vcpkg
        shell: powershell
        run: |
          # See https://learn.microsoft.com/en-us/vcpkg/get_started/get-started?pivots=shell-powershell#1---set-up-vcpkg
          if (-not (Test-Path '${{ env.VCPKG_ROOT }}/vcpkg.exe')) {
            git clone https://github.com/microsoft/vcpkg ${{ env.VCPKG_ROOT }}
            ${{ env.VCPKG_ROOT }}/bootstrap-vcpkg.bat -disableMetrics
          } else {
            Write-Host "vcpkg.exe already exists; skipping bootstrap."
          }
          
      - name: Install vcpkg prerequisites
        if: steps.cache-vcpkg.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          ${{ env.VCPKG_ROOT }}/vcpkg.exe install ${{ env.VCPKG_PACKAGES }} --triplet=x64-windows
          Remove-Item -Recurse -Force ${{ env.VCPKG_ROOT }}/.git
          Remove-Item -Recurse -Force ${{ env.VCPKG_ROOT }}/buildtrees
          Remove-Item -Recurse -Force ${{ env.VCPKG_ROOT }}/ports
          Remove-Item -Recurse -Force ${{ env.VCPKG_ROOT }}/downloads
          Remove-Item -Recurse -Force ${{ env.VCPKG_ROOT }}/.github
          Remove-Item -Recurse -Force ${{ env.VCPKG_ROOT }}/docs
          Remove-Item -Recurse -Force ${{ env.VCPKG_ROOT }}/versions
      
      - name: List installed packages
        shell: powershell
        run: ${{ env.VCPKG_ROOT }}/vcpkg.exe list

      - name: Disk usage installed packages
        shell: bash
        run: |
          echo "vcpkg:"
          du -h -d1 ${{ env.VCPKG_ROOT }} | sort -h
          echo ""
          echo "Intel oneAPI:"
          du -h -d4 "C:\Program Files (x86)\Intel\oneAPI/mkl" | sort -h
          echo ""
          ls -l ${{ env.VCPKG_ROOT }}/installed/x64-windows/include/boost/

      - name: Install Intel OneAPI
        if: steps.cache-oneapi.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          Write-Host "Installing Intel OneAPI..."
          $url = $env:WINDOWS_BASEKIT_URL
          $components = "intel.oneapi.win.mkl.devel"
          $tempExe = Join-Path $env:TEMP "webimage.exe"
          
          Write-Host "Downloading installer from $url..."
          curl.exe -L $url -o $tempExe
          
          Write-Host "Extracting installer..."
          $installerArgs = "-s -x -f webimage_extracted --log extract.log"
          $proc = Start-Process -FilePath $tempExe -ArgumentList $installerArgs -NoNewWindow -Wait -PassThru
          Remove-Item $tempExe -Force
          
          $bootstrapperPath = Join-Path -Path (Join-Path $PWD "webimage_extracted") "bootstrapper.exe"
          if (-Not (Test-Path $bootstrapperPath)) {
              throw "Bootstrapper not found at $bootstrapperPath"
          }

          Write-Host "Listing available components..."
          $procBootstrap = Start-Process -FilePath $bootstrapperPath -ArgumentList "--list-components" -NoNewWindow -Wait -PassThru -RedirectStandardOutput components
          get-content components

          Write-Host "Running bootstrapper..."
          $bootstrapArgs = "-s --action install --components=$components --eula=accept -p=NEED_VS2017_INTEGRATION=0 -p=NEED_VS2019_INTEGRATION=0 -p=NEED_VS2022_INTEGRATION=0 --log-dir=."
          $procBootstrap = Start-Process -FilePath $bootstrapperPath -ArgumentList $bootstrapArgs -NoNewWindow -Wait -PassThru
          if ($procBootstrap.ExitCode -ne 0) {
              throw "Bootstrapper installation failed with exit code $($procBootstrap.ExitCode)"
          }          
          # Remove-Item -Recurse -Force "webimage_extracted"
          
      # - uses: GuillaumeFalourd/setup-windows10-sdk-action@v2.4
      #   with:
      #     sdk-version: 26100
      
      # - name: Add MSBuild to PATH
      #   uses: microsoft/setup-msbuild@v2

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          path: "./src"

      - name: Find solution file
        id: find_sln
        shell: bash
        working-directory: "./src"
        run: |
          sln=$(find . -type f -name "*.sln" | head -n 1)
          if [ -z "$sln" ]; then
            echo "Solution file not found" >&2
            exit 1
          fi
          echo "Solution file: $sln"
          echo "sln=$sln" >> "$GITHUB_OUTPUT"

      - name: Find Windows SDKs Installed
        shell: powershell
        run: |
          Write-Host "Installed Windows SDKs:"
          Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\Include" -Directory |
          Select-Object -ExpandProperty Name |
          Write-Output

      - name: Find 

      - name: Build DynAdjust
        shell: cmd
        working-directory: "./src"
        run: |
          rem call /k "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvars64.bat"
          %comspec% /k "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          %comspec% /k %ProgramFiles(x86)%\Intel\oneAPI\mkl\2025.1\env\vars.bat
          rem ..\vcpkg\vcpkg.exe integrate install
          set MKL_INC=%MKLROOT%\include
          set DEPS_DIR=${{ env.VCPKG_ROOT }}\installed\x64-windows\include
          set XSD_DIR=%GITHUB_WORKSPACE%\%CS_XSD_INSTALL_FOLDER%
          set INCLUDE=%DEPS_DIR%;%XSD_DIR%;%MKL_INC%;%INCLUDE%
          set UseEnv=true
          msbuild /p:Configuration=Release /p:Platform=x64 ${{ steps.find_sln.outputs.sln }}
          
      - name: List directories
        shell: bash
        run: ls -la ${{ env.VCPKG_ROOT }} || echo "VCPKG_ROOT=${{ env.VCPKG_ROOT }} does not exist."      
      
