// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <iostream>

#include <dynadjust/dnaimport/dnaparser_pskel.hxx>

#include <include/io/DynaML-schema.hxx>

using namespace std;
using namespace dynadjust::measurements;

// Clusterpoint_pskel
//

void Clusterpoint_pskel::X_parser (::xml_schema::string_pskel& p)
{
	this->X_parser_ = &p;
}

void Clusterpoint_pskel::Y_parser (::xml_schema::string_pskel& p)
{
	this->Y_parser_ = &p;
}

void Clusterpoint_pskel::Z_parser (::xml_schema::string_pskel& p)
{
	this->Z_parser_ = &p;
}

void Clusterpoint_pskel::MeasurementDBID_parser (::xml_schema::string_pskel& p)
{
	this->MeasurementDBID_parser_ = &p;
}

void Clusterpoint_pskel::SigmaXX_parser (::xml_schema::string_pskel& p)
{
	this->SigmaXX_parser_ = &p;
}

void Clusterpoint_pskel::SigmaXY_parser (::xml_schema::string_pskel& p)
{
	this->SigmaXY_parser_ = &p;
}

void Clusterpoint_pskel::SigmaXZ_parser (::xml_schema::string_pskel& p)
{
	this->SigmaXZ_parser_ = &p;
}

void Clusterpoint_pskel::SigmaYY_parser (::xml_schema::string_pskel& p)
{
	this->SigmaYY_parser_ = &p;
}

void Clusterpoint_pskel::SigmaYZ_parser (::xml_schema::string_pskel& p)
{
	this->SigmaYZ_parser_ = &p;
}

void Clusterpoint_pskel::SigmaZZ_parser (::xml_schema::string_pskel& p)
{
	this->SigmaZZ_parser_ = &p;
}

void Clusterpoint_pskel::PointCovariance_parser (::PointCovariance_pskel& p)
{
	this->PointCovariance_parser_ = &p;
}

void Clusterpoint_pskel::parsers (
		::xml_schema::string_pskel& X,
		::xml_schema::string_pskel& Y,
		::xml_schema::string_pskel& Z,
		::xml_schema::string_pskel& MeasurementDBID,
		::xml_schema::string_pskel& SigmaXX,
		::xml_schema::string_pskel& SigmaXY,
		::xml_schema::string_pskel& SigmaXZ,
		::xml_schema::string_pskel& SigmaYY,
		::xml_schema::string_pskel& SigmaYZ,
		::xml_schema::string_pskel& SigmaZZ,
		::PointCovariance_pskel& PointCovariance)
{
	this->X_parser_ = &X;
	this->Y_parser_ = &Y;
	this->Z_parser_ = &Z;
	this->MeasurementDBID_parser_ = &MeasurementDBID;
	this->SigmaXX_parser_ = &SigmaXX;
	this->SigmaXY_parser_ = &SigmaXY;
	this->SigmaXZ_parser_ = &SigmaXZ;
	this->SigmaYY_parser_ = &SigmaYY;
	this->SigmaYZ_parser_ = &SigmaYZ;
	this->SigmaZZ_parser_ = &SigmaZZ;
	this->PointCovariance_parser_ = &PointCovariance;
}

Clusterpoint_pskel::Clusterpoint_pskel ()
	: X_parser_ (0),
	Y_parser_ (0),
	Z_parser_ (0),
	MeasurementDBID_parser_ (0),
	SigmaXX_parser_ (0),
	SigmaXY_parser_ (0),
	SigmaXZ_parser_ (0),
	SigmaYY_parser_ (0),
	SigmaYZ_parser_ (0),
	SigmaZZ_parser_ (0),
	PointCovariance_parser_ (0)
{
}

// Directions_pskel
//

void Directions_pskel::Ignore_parser (::xml_schema::string_pskel& p)
{
	this->Ignore_parser_ = &p;
}

void Directions_pskel::Target_parser (::xml_schema::string_pskel& p)
{
	this->Target_parser_ = &p;
}

void Directions_pskel::Value_parser (::xml_schema::string_pskel& p)
{
	this->Value_parser_ = &p;
}

void Directions_pskel::StdDev_parser (::xml_schema::string_pskel& p)
{
	this->StdDev_parser_ = &p;
}

void Directions_pskel::MeasurementDBID_parser (::xml_schema::string_pskel& p)
{
	this->MeasurementDBID_parser_ = &p;
}

void Directions_pskel::parsers (
		::xml_schema::string_pskel& Ignore,
		::xml_schema::string_pskel& Target,
		::xml_schema::string_pskel& Value,
		::xml_schema::string_pskel& StdDev,
		::xml_schema::string_pskel& MeasurementDBID)
{
	this->Ignore_parser_ = &Ignore;
	this->Target_parser_ = &Target;
	this->Value_parser_ = &Value;
	this->StdDev_parser_ = &StdDev;
	this->MeasurementDBID_parser_ = &MeasurementDBID;
}

Directions_pskel::Directions_pskel ()
	: Ignore_parser_ (0),
	Target_parser_ (0),
	Value_parser_ (0),
	StdDev_parser_ (0),
	MeasurementDBID_parser_ (0)
{
}

// DnaMeasurement_pskel
//

void DnaMeasurement_pskel::Type_parser (::xml_schema::string_pskel& p)
{
	this->Type_parser_ = &p;
}

void DnaMeasurement_pskel::Ignore_parser (::xml_schema::string_pskel& p)
{
	this->Ignore_parser_ = &p;
}

void DnaMeasurement_pskel::First_parser (::xml_schema::string_pskel& p)
{
	this->First_parser_ = &p;
}

void DnaMeasurement_pskel::Second_parser (::xml_schema::string_pskel& p)
{
	this->Second_parser_ = &p;
}

void DnaMeasurement_pskel::Third_parser (::xml_schema::string_pskel& p)
{
	this->Third_parser_ = &p;
}

void DnaMeasurement_pskel::Value_parser (::xml_schema::string_pskel& p)
{
	this->Value_parser_ = &p;
}

void DnaMeasurement_pskel::StdDev_parser (::xml_schema::string_pskel& p)
{
	this->StdDev_parser_ = &p;
}

void DnaMeasurement_pskel::InstHeight_parser (::xml_schema::string_pskel& p)
{
	this->InstHeight_parser_ = &p;
}

void DnaMeasurement_pskel::TargHeight_parser (::xml_schema::string_pskel& p)
{
	this->TargHeight_parser_ = &p;
}

void DnaMeasurement_pskel::Total_parser (::xml_schema::string_pskel& p)
{
	this->Total_parser_ = &p;
}

void DnaMeasurement_pskel::Directions_parser (::Directions_pskel& p)
{
	this->Directions_parser_ = &p;
}

void DnaMeasurement_pskel::Vscale_parser (::xml_schema::string_pskel& p)
{
	this->Vscale_parser_ = &p;
}

void DnaMeasurement_pskel::Epoch_parser (::xml_schema::string_pskel& p)
{
	this->Epoch_parser_ = &p;
}

void DnaMeasurement_pskel::GPSBaseline_parser (::GPSBaseline_pskel& p)
{
	this->GPSBaseline_parser_ = &p;
}

void DnaMeasurement_pskel::Hscale_parser (::xml_schema::string_pskel& p)
{
	this->Hscale_parser_ = &p;
}

void DnaMeasurement_pskel::Lscale_parser (::xml_schema::string_pskel& p)
{
	this->Lscale_parser_ = &p;
}

void DnaMeasurement_pskel::Pscale_parser (::xml_schema::string_pskel& p)
{
	this->Pscale_parser_ = &p;
}

void DnaMeasurement_pskel::Clusterpoint_parser (::Clusterpoint_pskel& p)
{
	this->Clusterpoint_parser_ = &p;
}

void DnaMeasurement_pskel::Coords_parser (::xml_schema::string_pskel& p)
{
	this->Coords_parser_ = &p;
}

void DnaMeasurement_pskel::Source_parser(::xml_schema::string_pskel& p)
{
	this->Source_parser_ = &p;
}

void DnaMeasurement_pskel::MeasurementDBID_parser(::xml_schema::string_pskel& p)
{
	this->MeasurementDBID_parser_ = &p;
}

void DnaMeasurement_pskel::ClusterDBID_parser(::xml_schema::string_pskel& p)
{
	this->MeasurementDBID_parser_ = &p;
}


void DnaMeasurement_pskel::parsers (
	::xml_schema::string_pskel& Type,
	::xml_schema::string_pskel& Ignore,
	::xml_schema::string_pskel& First,
	::xml_schema::string_pskel& Second,
	::xml_schema::string_pskel& Third,
	::xml_schema::string_pskel& Value,
	::xml_schema::string_pskel& StdDev,
	::xml_schema::string_pskel& InstHeight,
	::xml_schema::string_pskel& TargHeight,
	::xml_schema::string_pskel& Total,
	::Directions_pskel& Directions,
	::xml_schema::string_pskel& Vscale,
	::xml_schema::string_pskel& Epoch,
	::xml_schema::string_pskel& ReferenceFrame,
	::GPSBaseline_pskel& GPSBaseline,
	::xml_schema::string_pskel& Hscale,
	::xml_schema::string_pskel& Lscale,
	::xml_schema::string_pskel& Pscale,
	::Clusterpoint_pskel& Clusterpoint,
	::xml_schema::string_pskel& Coords,
	::xml_schema::string_pskel& Source,
	::xml_schema::string_pskel& MeasurementDBID,
	::xml_schema::string_pskel& ClusterDBID,
	bool preferSingleXasG)
{
	this->Type_parser_ = &Type;
	this->Ignore_parser_ = &Ignore;
	this->First_parser_ = &First;
	this->Second_parser_ = &Second;
	this->Third_parser_ = &Third;
	this->Value_parser_ = &Value;
	this->StdDev_parser_ = &StdDev;
	this->InstHeight_parser_ = &InstHeight;
	this->TargHeight_parser_ = &TargHeight;
	this->Total_parser_ = &Total;
	this->Directions_parser_ = &Directions;
	this->Vscale_parser_ = &Vscale;
	this->Epoch_parser_ = &Epoch;
	this->ReferenceFrame_parser_ = &ReferenceFrame;
	this->GPSBaseline_parser_ = &GPSBaseline;
	this->Hscale_parser_ = &Hscale;
	this->Lscale_parser_ = &Lscale;
	this->Pscale_parser_ = &Pscale;
	this->Clusterpoint_parser_ = &Clusterpoint;
	this->Coords_parser_ = &Coords;
	this->Source_parser_ = &Source;
	this->MeasurementDBID_parser_ = &MeasurementDBID;
	this->ClusterDBID_parser_ = &ClusterDBID;
	this->_preferSingleXasG = preferSingleXasG;
}

DnaMeasurement_pskel::DnaMeasurement_pskel ()
	: Type_parser_ (0),
	Ignore_parser_ (0),
	First_parser_ (0),
	Second_parser_ (0),
	Third_parser_ (0),
	Value_parser_ (0),
	StdDev_parser_ (0),
	InstHeight_parser_ (0),
	TargHeight_parser_ (0),
	Total_parser_ (0),
	Directions_parser_ (0),
	Vscale_parser_ (0),
	Epoch_parser_ (0),
	ReferenceFrame_parser_ (0),
	GPSBaseline_parser_ (0),
	Hscale_parser_ (0),
	Lscale_parser_ (0),
	Pscale_parser_ (0),
	Clusterpoint_parser_ (0),
	Coords_parser_ (0),
	Source_parser_ (0),
	MeasurementDBID_parser_ (0),
	ClusterDBID_parser_ (0),
	_preferSingleXasG(false)
{
}

// DnaStation_pskel
//

void DnaStation_pskel::Name_parser (::xml_schema::string_pskel& p)
{
	this->Name_parser_ = &p;
}

void DnaStation_pskel::Constraints_parser (::xml_schema::string_pskel& p)
{
	this->Constraints_parser_ = &p;
}

void DnaStation_pskel::Type_parser (::xml_schema::string_pskel& p)
{
	this->Type_parser_ = &p;
}

void DnaStation_pskel::StationCoord_parser (::StationCoord_pskel& p)
{
	this->StationCoord_parser_ = &p;
}

void DnaStation_pskel::Description_parser (::xml_schema::string_pskel& p)
{
	this->Description_parser_ = &p;
}

void DnaStation_pskel::parsers (::xml_schema::string_pskel& Name,
	::xml_schema::string_pskel& Constraints,
	::xml_schema::string_pskel& Type,
	::StationCoord_pskel& StationCoord,
	::xml_schema::string_pskel& Description)
{
	this->Name_parser_ = &Name;
	this->Constraints_parser_ = &Constraints;
	this->Type_parser_ = &Type;
	this->StationCoord_parser_ = &StationCoord;
	this->Description_parser_ = &Description;
}

DnaStation_pskel::DnaStation_pskel ()
	: Name_parser_ (0),
	Constraints_parser_ (0),
	Type_parser_ (0),
	StationCoord_parser_ (0),
	Description_parser_ (0)
{
}

// DnaXmlFormat_pskel
//

void DnaXmlFormat_pskel::DnaStation_parser (::DnaStation_pskel& p)
{
	this->DnaStation_parser_ = &p;
}

void DnaXmlFormat_pskel::DnaMeasurement_parser (::DnaMeasurement_pskel& p)
{
	this->DnaMeasurement_parser_ = &p;
}

void DnaXmlFormat_pskel::type_parser (::type_pskel& p)
{
	this->type_parser_ = &p;
}

void DnaXmlFormat_pskel::epoch_parser (::epoch_pskel& p)
{
	this->epoch_parser_ = &p;
}

void DnaXmlFormat_pskel::referenceframe_parser (::referenceframe_pskel& p)
{
	this->referenceframe_parser_ = &p;
}

void DnaXmlFormat_pskel::parsers (::DnaStation_pskel& DnaStation,
	::DnaMeasurement_pskel& DnaMeasurement,
	::type_pskel& type,
	::referenceframe_pskel& referenceframe,
	::epoch_pskel& epoch)
{
	this->DnaStation_parser_ = &DnaStation;
	this->DnaMeasurement_parser_ = &DnaMeasurement;
	this->type_parser_ = &type;
	this->referenceframe_parser_ = &referenceframe;
	this->epoch_parser_ = &epoch;
}

DnaXmlFormat_pskel::DnaXmlFormat_pskel ()
	: DnaStation_parser_ (0),
	DnaMeasurement_parser_ (0),
	type_parser_ (0),
	referenceframe_parser_ (0),
	epoch_parser_ (0)
{
}

// GPSBaseline_pskel
//

void GPSBaseline_pskel::X_parser (::xml_schema::string_pskel& p)
{
	this->X_parser_ = &p;
}

void GPSBaseline_pskel::Y_parser (::xml_schema::string_pskel& p)
{
	this->Y_parser_ = &p;
}

void GPSBaseline_pskel::Z_parser (::xml_schema::string_pskel& p)
{
	this->Z_parser_ = &p;
}

void GPSBaseline_pskel::MeasurementDBID_parser (::xml_schema::string_pskel& p)
{
	this->MeasurementDBID_parser_ = &p;
}

void GPSBaseline_pskel::SigmaXX_parser (::xml_schema::string_pskel& p)
{
	this->SigmaXX_parser_ = &p;
}

void GPSBaseline_pskel::SigmaXY_parser (::xml_schema::string_pskel& p)
{
	this->SigmaXY_parser_ = &p;
}

void GPSBaseline_pskel::SigmaXZ_parser (::xml_schema::string_pskel& p)
{
	this->SigmaXZ_parser_ = &p;
}

void GPSBaseline_pskel::SigmaYY_parser (::xml_schema::string_pskel& p)
{
	this->SigmaYY_parser_ = &p;
}

void GPSBaseline_pskel::SigmaYZ_parser (::xml_schema::string_pskel& p)
{
	this->SigmaYZ_parser_ = &p;
}

void GPSBaseline_pskel::SigmaZZ_parser (::xml_schema::string_pskel& p)
{
	this->SigmaZZ_parser_ = &p;
}

void GPSBaseline_pskel::GPSCovariance_parser (::GPSCovariance_pskel& p)
{
	this->GPSCovariance_parser_ = &p;
}

void GPSBaseline_pskel::parsers (
	::xml_schema::string_pskel& X,
	::xml_schema::string_pskel& Y,
	::xml_schema::string_pskel& Z,
	::xml_schema::string_pskel& MeasurementDBID,
	::xml_schema::string_pskel& SigmaXX,
	::xml_schema::string_pskel& SigmaXY,
	::xml_schema::string_pskel& SigmaXZ,
	::xml_schema::string_pskel& SigmaYY,
	::xml_schema::string_pskel& SigmaYZ,
	::xml_schema::string_pskel& SigmaZZ,
	::GPSCovariance_pskel& GPSCovariance)
{
	this->X_parser_ = &X;
	this->Y_parser_ = &Y;
	this->Z_parser_ = &Z;
	this->MeasurementDBID_parser_ = &MeasurementDBID;
	this->SigmaXX_parser_ = &SigmaXX;
	this->SigmaXY_parser_ = &SigmaXY;
	this->SigmaXZ_parser_ = &SigmaXZ;
	this->SigmaYY_parser_ = &SigmaYY;
	this->SigmaYZ_parser_ = &SigmaYZ;
	this->SigmaZZ_parser_ = &SigmaZZ;
	this->GPSCovariance_parser_ = &GPSCovariance;
}

GPSBaseline_pskel::GPSBaseline_pskel ()
	: X_parser_ (0),
	Y_parser_ (0),
	Z_parser_ (0),
	MeasurementDBID_parser_ (0),
	SigmaXX_parser_ (0),
	SigmaXY_parser_ (0),
	SigmaXZ_parser_ (0),
	SigmaYY_parser_ (0),
	SigmaYZ_parser_ (0),
	SigmaZZ_parser_ (0),
	GPSCovariance_parser_ (0)
{
}

// GPSCovariance_pskel
//

void GPSCovariance_pskel::m11_parser (::xml_schema::string_pskel& p)
{
	this->m11_parser_ = &p;
}

void GPSCovariance_pskel::m12_parser (::xml_schema::string_pskel& p)
{
	this->m12_parser_ = &p;
}

void GPSCovariance_pskel::m13_parser (::xml_schema::string_pskel& p)
{
	this->m13_parser_ = &p;
}

void GPSCovariance_pskel::m21_parser (::xml_schema::string_pskel& p)
{
	this->m21_parser_ = &p;
}

void GPSCovariance_pskel::m22_parser (::xml_schema::string_pskel& p)
{
	this->m22_parser_ = &p;
}

void GPSCovariance_pskel::m23_parser (::xml_schema::string_pskel& p)
{
	this->m23_parser_ = &p;
}

void GPSCovariance_pskel::m31_parser (::xml_schema::string_pskel& p)
{
	this->m31_parser_ = &p;
}

void GPSCovariance_pskel::m32_parser (::xml_schema::string_pskel& p)
{
	this->m32_parser_ = &p;
}

void GPSCovariance_pskel::m33_parser (::xml_schema::string_pskel& p)
{
	this->m33_parser_ = &p;
}

void GPSCovariance_pskel::parsers (::xml_schema::string_pskel& m11,
	::xml_schema::string_pskel& m12,
	::xml_schema::string_pskel& m13,
	::xml_schema::string_pskel& m21,
	::xml_schema::string_pskel& m22,
	::xml_schema::string_pskel& m23,
	::xml_schema::string_pskel& m31,
	::xml_schema::string_pskel& m32,
	::xml_schema::string_pskel& m33)
{
	this->m11_parser_ = &m11;
	this->m12_parser_ = &m12;
	this->m13_parser_ = &m13;
	this->m21_parser_ = &m21;
	this->m22_parser_ = &m22;
	this->m23_parser_ = &m23;
	this->m31_parser_ = &m31;
	this->m32_parser_ = &m32;
	this->m33_parser_ = &m33;
}

GPSCovariance_pskel::GPSCovariance_pskel ()
	: m11_parser_ (0),
	m12_parser_ (0),
	m13_parser_ (0),
	m21_parser_ (0),
	m22_parser_ (0),
	m23_parser_ (0),
	m31_parser_ (0),
	m32_parser_ (0),
	m33_parser_ (0)
{
}

// Height_pskel
//

void Height_pskel::system_parser (::xml_schema::string_pskel& p)
{
	this->system_parser_ = &p;
}

void Height_pskel::parsers (::system_pskel& system)
{
	this->system_parser_ = &system;
}

Height_pskel::Height_pskel ()
	: system_parser_ (0)
{
}

// PointCovariance_pskel
//

void PointCovariance_pskel::m11_parser (::xml_schema::string_pskel& p)
{
	this->m11_parser_ = &p;
}

void PointCovariance_pskel::m12_parser (::xml_schema::string_pskel& p)
{
	this->m12_parser_ = &p;
}

void PointCovariance_pskel::m13_parser (::xml_schema::string_pskel& p)
{
	this->m13_parser_ = &p;
}

void PointCovariance_pskel::m21_parser (::xml_schema::string_pskel& p)
{
	this->m21_parser_ = &p;
}

void PointCovariance_pskel::m22_parser (::xml_schema::string_pskel& p)
{
	this->m22_parser_ = &p;
}

void PointCovariance_pskel::m23_parser (::xml_schema::string_pskel& p)
{
	this->m23_parser_ = &p;
}

void PointCovariance_pskel::m31_parser (::xml_schema::string_pskel& p)
{
	this->m31_parser_ = &p;
}

void PointCovariance_pskel::m32_parser (::xml_schema::string_pskel& p)
{
	this->m32_parser_ = &p;
}

void PointCovariance_pskel::m33_parser (::xml_schema::string_pskel& p)
{
	this->m33_parser_ = &p;
}

void PointCovariance_pskel::parsers (::xml_schema::string_pskel& m11,
	::xml_schema::string_pskel& m12,
	::xml_schema::string_pskel& m13,
	::xml_schema::string_pskel& m21,
	::xml_schema::string_pskel& m22,
	::xml_schema::string_pskel& m23,
	::xml_schema::string_pskel& m31,
	::xml_schema::string_pskel& m32,
	::xml_schema::string_pskel& m33)
{
	this->m11_parser_ = &m11;
	this->m12_parser_ = &m12;
	this->m13_parser_ = &m13;
	this->m21_parser_ = &m21;
	this->m22_parser_ = &m22;
	this->m23_parser_ = &m23;
	this->m31_parser_ = &m31;
	this->m32_parser_ = &m32;
	this->m33_parser_ = &m33;
}

PointCovariance_pskel::PointCovariance_pskel ()
	: m11_parser_ (0),
	m12_parser_ (0),
	m13_parser_ (0),
	m21_parser_ (0),
	m22_parser_ (0),
	m23_parser_ (0),
	m31_parser_ (0),
	m32_parser_ (0),
	m33_parser_ (0)
{
}

// StationCoord_pskel
//

void StationCoord_pskel::Name_parser (::xml_schema::string_pskel& p)
{
	this->Name_parser_ = &p;
}

void StationCoord_pskel::XAxis_parser (::xml_schema::string_pskel& p)
{
	this->XAxis_parser_ = &p;
}

void StationCoord_pskel::YAxis_parser (::xml_schema::string_pskel& p)
{
	this->YAxis_parser_ = &p;
}

void StationCoord_pskel::Height_parser (::Height_pskel& p)
{
	this->Height_parser_ = &p;
}

void StationCoord_pskel::HemisphereZone_parser (::xml_schema::string_pskel& p)
{
	this->HemisphereZone_parser_ = &p;
}

void StationCoord_pskel::GeoidModel_parser (::GeoidModel_pskel& p)
{
	this->GeoidModel_parser_ = &p;
}

void StationCoord_pskel::parsers (::xml_schema::string_pskel& Name,
	::xml_schema::string_pskel& XAxis,
	::xml_schema::string_pskel& YAxis,
	::Height_pskel& Height,
	::xml_schema::string_pskel& HemisphereZone,
	::GeoidModel_pskel& GeoidModel)
{
	this->Name_parser_ = &Name;
	this->XAxis_parser_ = &XAxis;
	this->YAxis_parser_ = &YAxis;
	this->Height_parser_ = &Height;
	this->HemisphereZone_parser_ = &HemisphereZone;
	this->GeoidModel_parser_ = &GeoidModel;
}

StationCoord_pskel::StationCoord_pskel ()
	: Name_parser_ (0),
	XAxis_parser_ (0),
	YAxis_parser_ (0),
	Height_parser_ (0),
	HemisphereZone_parser_ (0),
	GeoidModel_parser_ (0)
{
}

// GeoidModel_pskel
//

void GeoidModel_pskel::NValue_parser (::xml_schema::string_pskel& p)
{
	this->NValue_parser_ = &p;
}

void GeoidModel_pskel::DeflPM_parser (::xml_schema::string_pskel& p)
{
	this->DeflPM_parser_ = &p;
}

void GeoidModel_pskel::DeflPV_parser (::xml_schema::string_pskel& p)
{
	this->DeflPV_parser_ = &p;
}

void GeoidModel_pskel::parsers (::xml_schema::string_pskel& NValue,
	::xml_schema::string_pskel& DeflPM,
	::xml_schema::string_pskel& DeflPV)
{
	this->NValue_parser_ = &NValue;
	this->DeflPM_parser_ = &DeflPM;
	this->DeflPV_parser_ = &DeflPV;
}

GeoidModel_pskel::GeoidModel_pskel ()
	: NValue_parser_ (0),
	DeflPM_parser_ (0),
	DeflPV_parser_ (0)
{
}

// Clusterpoint_pskel
//

void Clusterpoint_pskel::X (const ::std::string&)
{
}

void Clusterpoint_pskel::Y (const ::std::string&)
{
}

void Clusterpoint_pskel::Z (const ::std::string&)
{
}

void Clusterpoint_pskel::MeasurementDBID (const ::std::string&)
{
}

void Clusterpoint_pskel::SigmaXX (const ::std::string&)
{
}

void Clusterpoint_pskel::SigmaXY (const ::std::string&)
{
}

void Clusterpoint_pskel::SigmaXZ (const ::std::string&)
{
}

void Clusterpoint_pskel::SigmaYY (const ::std::string&)
{
}

void Clusterpoint_pskel::SigmaYZ (const ::std::string&)
{
}

void Clusterpoint_pskel::SigmaZZ (const ::std::string&)
{
}

void Clusterpoint_pskel::PointCovariance ()
{
}

void Clusterpoint_pskel::post_Clusterpoint ()
{
}

bool Clusterpoint_pskel::_start_element_impl (const ::xml_schema::ro_string& ns,
	const ::xml_schema::ro_string& n,
	const ::xml_schema::ro_string* t)
{
	XSD_UNUSED (t);

	if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
		return true;

	if (n == "X" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->X_parser_;

		if (this->X_parser_)
			this->X_parser_->pre ();

		return true;
	}

	if (n == "Y" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->Y_parser_;

		if (this->Y_parser_)
			this->Y_parser_->pre ();

		return true;
	}

	if (n == "Z" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->Z_parser_;

		if (this->Z_parser_)
			this->Z_parser_->pre ();

		return true;
	}

	if (n == "MeasurementID" && ns.empty())
	{
		this->::xml_schema::complex_content::context_.top().parser_ = this->MeasurementDBID_parser_;

		if (this->MeasurementDBID_parser_)
			this->MeasurementDBID_parser_->pre();

		return true;
	}

	if (n == "SigmaXX" && ns.empty())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->SigmaXX_parser_;

		if (this->SigmaXX_parser_)
			this->SigmaXX_parser_->pre ();

		return true;
	}

	if (n == "SigmaXY" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->SigmaXY_parser_;

		if (this->SigmaXY_parser_)
			this->SigmaXY_parser_->pre ();

		return true;
	}

	if (n == "SigmaXZ" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->SigmaXZ_parser_;

		if (this->SigmaXZ_parser_)
			this->SigmaXZ_parser_->pre ();

		return true;
	}

	if (n == "SigmaYY" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->SigmaYY_parser_;

		if (this->SigmaYY_parser_)
			this->SigmaYY_parser_->pre ();

		return true;
	}

	if (n == "SigmaYZ" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->SigmaYZ_parser_;

		if (this->SigmaYZ_parser_)
			this->SigmaYZ_parser_->pre ();

		return true;
	}

	if (n == "SigmaZZ" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->SigmaZZ_parser_;

		if (this->SigmaZZ_parser_)
			this->SigmaZZ_parser_->pre ();

		return true;
	}

	if (n == "PointCovariance" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->PointCovariance_parser_;

		if (this->PointCovariance_parser_)
		{
			this->PointCovariance_parser_->InitparentGpsPoint(_dnaGpsPoint);
			this->PointCovariance_parser_->pre ();
		}

		return true;
	}

	return false;
}

bool Clusterpoint_pskel::_end_element_impl (const ::xml_schema::ro_string& ns,
	const ::xml_schema::ro_string& n)
{
	if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
		return true;

	if (n == "X" && ns.empty ())
	{
		if (this->X_parser_)
			this->X (this->X_parser_->post_string ());

		return true;
	}

	if (n == "Y" && ns.empty ())
	{
		if (this->Y_parser_)
			this->Y (this->Y_parser_->post_string ());

		return true;
	}

	if (n == "Z" && ns.empty ())
	{
		if (this->Z_parser_)
			this->Z (this->Z_parser_->post_string ());

		return true;
	}

	if (n == "MeasurementID" && ns.empty())
	{
		if (this->MeasurementDBID_parser_)
			this->MeasurementDBID (this->MeasurementDBID_parser_->post_string());

		return true;
	}

	if (n == "SigmaXX" && ns.empty())
	{
		if (this->SigmaXX_parser_)
			this->SigmaXX (this->SigmaXX_parser_->post_string ());

		return true;
	}

	if (n == "SigmaXY" && ns.empty ())
	{
		if (this->SigmaXY_parser_)
			this->SigmaXY (this->SigmaXY_parser_->post_string ());

		return true;
	}

	if (n == "SigmaXZ" && ns.empty ())
	{
		if (this->SigmaXZ_parser_)
			this->SigmaXZ (this->SigmaXZ_parser_->post_string ());

		return true;
	}

	if (n == "SigmaYY" && ns.empty ())
	{
		if (this->SigmaYY_parser_)
			this->SigmaYY (this->SigmaYY_parser_->post_string ());

		return true;
	}

	if (n == "SigmaYZ" && ns.empty ())
	{
		if (this->SigmaYZ_parser_)
			this->SigmaYZ (this->SigmaYZ_parser_->post_string ());

		return true;
	}

	if (n == "SigmaZZ" && ns.empty ())
	{
		if (this->SigmaZZ_parser_)
			this->SigmaZZ (this->SigmaZZ_parser_->post_string ());

		return true;
	}

	if (n == "PointCovariance" && ns.empty ())
	{
		if (this->PointCovariance_parser_)
		{
			this->PointCovariance_parser_->post_PointCovariance ();
			this->PointCovariance ();
		}

		return true;
	}

	return false;
}

// Directions_pskel
//

void Directions_pskel::Ignore (const ::std::string&)
{
}

void Directions_pskel::Target (const ::std::string&)
{
}

void Directions_pskel::Value (const ::std::string&)
{
}

void Directions_pskel::StdDev (const ::std::string&)
{
}

void Directions_pskel::MeasurementDBID (const ::std::string&)
{
}

void Directions_pskel::post_Directions ()
{
}

bool Directions_pskel::_start_element_impl (const ::xml_schema::ro_string& ns,
	const ::xml_schema::ro_string& n,
	const ::xml_schema::ro_string* t)
{
	XSD_UNUSED (t);

	if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
		return true;

	if (n == "Ignore" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->Ignore_parser_;

		if (this->Ignore_parser_)
			this->Ignore_parser_->pre ();

		return true;
	}

	if (n == "Target" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->Target_parser_;

		if (this->Target_parser_)
			this->Target_parser_->pre ();

		return true;
	}

	if (n == "Value" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->Value_parser_;

		if (this->Value_parser_)
			this->Value_parser_->pre ();

		return true;
	}

	if (n == "StdDev" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->StdDev_parser_;

		if (this->StdDev_parser_)
			this->StdDev_parser_->pre ();

		return true;
	}

	if (n == "MeasurementID" && ns.empty())
	{
		this->::xml_schema::complex_content::context_.top().parser_ = this->MeasurementDBID_parser_;

		if (this->MeasurementDBID_parser_)
			this->MeasurementDBID_parser_->pre();

		return true;
	}

	return false;
}

bool Directions_pskel::_end_element_impl (const ::xml_schema::ro_string& ns,
	const ::xml_schema::ro_string& n)
{
	if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
		return true;

	if (n == "Ignore" && ns.empty ())
	{
		if (this->Ignore_parser_)
			this->Ignore (this->Ignore_parser_->post_string ());

		return true;
	}

	if (n == "Target" && ns.empty ())
	{
		if (this->Target_parser_)
			this->Target (this->Target_parser_->post_string ());

		return true;
	}

	if (n == "Value" && ns.empty ())
	{
		if (this->Value_parser_)
			this->Value (this->Value_parser_->post_string ());

		return true;
	}

	if (n == "StdDev" && ns.empty ())
	{
		if (this->StdDev_parser_)
			this->StdDev (this->StdDev_parser_->post_string ());

		return true;
	}

	if (n == "MeasurementID" && ns.empty())
	{
		if (this->MeasurementDBID_parser_)
			this->MeasurementDBID (this->MeasurementDBID_parser_->post_string());

		return true;
	}

	return false;
}

// DnaMeasurement_pskel
//

void DnaMeasurement_pskel::Type (const ::std::string&)
{
}

void DnaMeasurement_pskel::Ignore (const ::std::string&)
{
}

void DnaMeasurement_pskel::First (const ::std::string&)
{
}

void DnaMeasurement_pskel::Second (const ::std::string&)
{
}

void DnaMeasurement_pskel::Third (const ::std::string&)
{
}

void DnaMeasurement_pskel::Value (const ::std::string&)
{
}

void DnaMeasurement_pskel::StdDev (const ::std::string&)
{
}

void DnaMeasurement_pskel::InstHeight (const ::std::string&)
{
}

void DnaMeasurement_pskel::TargHeight (const ::std::string&)
{
}

void DnaMeasurement_pskel::Total (const ::std::string&)
{
}

void DnaMeasurement_pskel::Directions ()
{
}

void DnaMeasurement_pskel::Vscale (const ::std::string&)
{
}

void DnaMeasurement_pskel::Epoch (const ::std::string&)
{
}

void DnaMeasurement_pskel::ReferenceFrame (const ::std::string&)
{
}

void DnaMeasurement_pskel::GPSBaseline ()
{
}

void DnaMeasurement_pskel::Hscale (const ::std::string&)
{
}

void DnaMeasurement_pskel::Lscale (const ::std::string&)
{
}

void DnaMeasurement_pskel::Pscale (const ::std::string&)
{
}

void DnaMeasurement_pskel::Clusterpoint ()
{
}

void DnaMeasurement_pskel::Coords (const ::std::string&)
{
}

void DnaMeasurement_pskel::Source (const ::std::string&)
{
}

void DnaMeasurement_pskel::MeasurementDBID (const ::std::string&)
{
}

void DnaMeasurement_pskel::ClusterDBID (const ::std::string&)
{
}

void DnaMeasurement_pskel::post_DnaMeasurement ()
{
}

bool DnaMeasurement_pskel::_start_element_impl (const ::xml_schema::ro_string& ns,
	const ::xml_schema::ro_string& n,
	const ::xml_schema::ro_string* t)
{
	XSD_UNUSED (t);

	if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
		return true;

	if (n == "Type" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->Type_parser_;

		if (this->Type_parser_)
			this->Type_parser_->pre ();

		return true;
	}

	if (n == "Ignore" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->Ignore_parser_;

		if (this->Ignore_parser_)
			this->Ignore_parser_->pre ();

		return true;
	}

	if (n == "First" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->First_parser_;

		if (this->First_parser_)
			this->First_parser_->pre ();

		return true;
	}

	if (n == "Second" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->Second_parser_;

		if (this->Second_parser_)
			this->Second_parser_->pre ();

		return true;
	}

	if (n == "Third" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->Third_parser_;

		if (this->Third_parser_)
			this->Third_parser_->pre ();

		return true;
	}

	if (n == "Value" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->Value_parser_;

		if (this->Value_parser_)
			this->Value_parser_->pre ();

		return true;
	}

	if (n == "StdDev" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->StdDev_parser_;

		if (this->StdDev_parser_)
			this->StdDev_parser_->pre ();

		return true;
	}

	if (n == "InstHeight" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->InstHeight_parser_;

		if (this->InstHeight_parser_)
			this->InstHeight_parser_->pre ();

		return true;
	}

	if (n == "TargHeight" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->TargHeight_parser_;

		if (this->TargHeight_parser_)
			this->TargHeight_parser_->pre ();

		return true;
	}

	if (n == "Total" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->Total_parser_;

		if (this->Total_parser_)
			this->Total_parser_->pre ();

		return true;
	}

	if (n == "Directions" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->Directions_parser_;

		if (this->Directions_parser_)
		{
			this->Directions_parser_->InitparentMsrCounter(_pMeasurementCount);
			this->Directions_parser_->InitparentDirnSet(_dnaCurrentMsr);
			this->Directions_parser_->pre ();
		}

		return true;
	}

	if (n == "Vscale" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->Vscale_parser_;

		if (this->Vscale_parser_)
			this->Vscale_parser_->pre ();

		return true;
	}

	if (n == "Epoch" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->Epoch_parser_;

		if (this->Epoch_parser_)
			this->Epoch_parser_->pre ();

		return true;
	}

	if (n == "ReferenceFrame" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->ReferenceFrame_parser_;

		if (this->ReferenceFrame_parser_)
			this->ReferenceFrame_parser_->pre ();

		return true;
	}

	if (n == "GPSBaseline" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->GPSBaseline_parser_;

		if (this->GPSBaseline_parser_)
		{
			this->GPSBaseline_parser_->InitparentMsrCounter(_pMeasurementCount);
			this->GPSBaseline_parser_->InitparentGpsBaselineCluster(_dnaCurrentMsr);
			this->GPSBaseline_parser_->pre ();
		}

		return true;
	}

	if (n == "Hscale" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->Hscale_parser_;

		if (this->Hscale_parser_)
			this->Hscale_parser_->pre ();

		return true;
	}

	if (n == "Lscale" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->Lscale_parser_;

		if (this->Lscale_parser_)
			this->Lscale_parser_->pre ();

		return true;
	}

	if (n == "Pscale" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->Pscale_parser_;

		if (this->Pscale_parser_)
			this->Pscale_parser_->pre ();

		return true;
	}

	if (n == "Clusterpoint" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->Clusterpoint_parser_;

		if (this->Clusterpoint_parser_)
		{
			this->Clusterpoint_parser_->InitparentMsrCounter(_pMeasurementCount);
			this->Clusterpoint_parser_->InitparentGpsPointCluster(_dnaCurrentMsr);
			this->Clusterpoint_parser_->pre ();
		}

		return true;
	}

	if (n == "Coords" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->Coords_parser_;

		if (this->Coords_parser_)
			this->Coords_parser_->pre ();

		return true;
	}

	if (n == "Source" && ns.empty())
	{
		this->::xml_schema::complex_content::context_.top().parser_ = this->Source_parser_;

		if (this->Source_parser_)
			this->Source_parser_->pre();

		return true;
	}

	if (n == "MeasurementID" && ns.empty())
	{
		this->::xml_schema::complex_content::context_.top().parser_ = this->MeasurementDBID_parser_;

		if (this->MeasurementDBID_parser_)
			this->MeasurementDBID_parser_->pre();

		return true;
	}

	if (n == "ClusterID" && ns.empty())
	{
		this->::xml_schema::complex_content::context_.top().parser_ = this->ClusterDBID_parser_;

		if (this->ClusterDBID_parser_)
			this->ClusterDBID_parser_->pre();

		return true;
	}

	return false;
}

bool DnaMeasurement_pskel::_end_element_impl (const ::xml_schema::ro_string& ns,
	const ::xml_schema::ro_string& n)
{
	if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
		return true;

	if (n == "Type" && ns.empty ())
	{
		if (this->Type_parser_)
			this->Type (this->Type_parser_->post_string ());

		return true;
	}

	if (n == "Ignore" && ns.empty ())
	{
		if (this->Ignore_parser_)
			this->Ignore (this->Ignore_parser_->post_string ());

		return true;
	}

	if (n == "First" && ns.empty ())
	{
		if (this->First_parser_)
			this->First (this->First_parser_->post_string ());

		return true;
	}

	if (n == "Second" && ns.empty ())
	{
		if (this->Second_parser_)
			this->Second (this->Second_parser_->post_string ());

		return true;
	}

	if (n == "Third" && ns.empty ())
	{
		if (this->Third_parser_)
			this->Third (this->Third_parser_->post_string ());

		return true;
	}

	if (n == "Value" && ns.empty ())
	{
		if (this->Value_parser_)
			this->Value (this->Value_parser_->post_string ());

		return true;
	}

	if (n == "StdDev" && ns.empty ())
	{
		if (this->StdDev_parser_)
			this->StdDev (this->StdDev_parser_->post_string ());

		return true;
	}

	if (n == "InstHeight" && ns.empty ())
	{
		if (this->InstHeight_parser_)
			this->InstHeight (this->InstHeight_parser_->post_string ());

		return true;
	}

	if (n == "TargHeight" && ns.empty ())
	{
		if (this->TargHeight_parser_)
			this->TargHeight (this->TargHeight_parser_->post_string ());

		return true;
	}

	if (n == "Total" && ns.empty ())
	{
		if (this->Total_parser_)
			this->Total (this->Total_parser_->post_string ());

		return true;
	}

	if (n == "Directions" && ns.empty ())
	{
		if (this->Directions_parser_)
		{
			this->Directions_parser_->post_Directions ();
			this->Directions ();
		}

		return true;
	}

	if (n == "Vscale" && ns.empty ())
	{
		if (this->Vscale_parser_)
			this->Vscale (this->Vscale_parser_->post_string ());

		return true;
	}

	if (n == "Epoch" && ns.empty ())
	{
		if (this->Epoch_parser_)
			this->Epoch (this->Epoch_parser_->post_string ());

		return true;
	}

	if (n == "ReferenceFrame" && ns.empty ())
	{
		if (this->ReferenceFrame_parser_)
			this->ReferenceFrame (this->ReferenceFrame_parser_->post_string ());

		return true;
	}

	if (n == "GPSBaseline" && ns.empty ())
	{
		if (this->GPSBaseline_parser_)
		{
			this->GPSBaseline_parser_->post_GPSBaseline ();
			this->GPSBaseline ();
		}

		return true;
	}

	if (n == "Hscale" && ns.empty ())
	{
		if (this->Hscale_parser_)
			this->Hscale (this->Hscale_parser_->post_string ());

		return true;
	}

	if (n == "Lscale" && ns.empty ())
	{
		if (this->Lscale_parser_)
			this->Lscale (this->Lscale_parser_->post_string ());

		return true;
	}

	if (n == "Pscale" && ns.empty ())
	{
		if (this->Pscale_parser_)
			this->Pscale (this->Pscale_parser_->post_string ());

		return true;
	}

	if (n == "Clusterpoint" && ns.empty ())
	{
		if (this->Clusterpoint_parser_)
		{
			this->Clusterpoint_parser_->post_Clusterpoint ();
			this->Clusterpoint ();
		}

		return true;
	}

	if (n == "Coords" && ns.empty ())
	{
		if (this->Coords_parser_)
			this->Coords (this->Coords_parser_->post_string ());

		return true;
	}

	if (n == "Source" && ns.empty())
	{
		if (this->Source_parser_)
			this->Source (this->Source_parser_->post_string());

		return true;
	}

	if (n == "MeasurementID" && ns.empty())
	{
		if (this->MeasurementDBID_parser_)
			this->MeasurementDBID (this->MeasurementDBID_parser_->post_string());

		return true;
	}

	if (n == "ClusterID" && ns.empty())
	{
		if (this->ClusterDBID_parser_)
			this->ClusterDBID (this->ClusterDBID_parser_->post_string());

		return true;
	}

	return false;
}

bool DnaMeasurement_pskel::_attribute_impl (const ::xml_schema::ro_string& ns,
	const ::xml_schema::ro_string& n,
	const ::xml_schema::ro_string& v)
{
	if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
		return true;

	//if (n == "epoch" && ns.empty ())
	//{
	//	if (this->epoch_parser_)
	//	{
	//		this->epoch_parser_->pre ();
	//		this->epoch_parser_->_pre_impl ();
	//		this->epoch_parser_->_characters (v);
	//		this->epoch_parser_->_post_impl ();
	//		this->epoch (this->epoch_parser_->post_string ());
	//	}

	//	return true;
	//}

	return false;
}

// DnaStation_pskel
//

void DnaStation_pskel::Name (const ::std::string&)
{
}

void DnaStation_pskel::Constraints (const ::std::string&)
{
}

void DnaStation_pskel::Type (const ::std::string&)
{
}

void DnaStation_pskel::StationCoord ()
{
}

void DnaStation_pskel::Description (const ::std::string&)
{
}

void DnaStation_pskel::post_DnaStation ()
{
}

bool DnaStation_pskel::_start_element_impl (const ::xml_schema::ro_string& ns,
	const ::xml_schema::ro_string& n,
	const ::xml_schema::ro_string* t)
{
	XSD_UNUSED (t);

	if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
		return true;

	if (n == "Name" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->Name_parser_;

		if (this->Name_parser_)
			this->Name_parser_->pre ();

		return true;
	}

	if (n == "Constraints" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->Constraints_parser_;

		if (this->Constraints_parser_)
			this->Constraints_parser_->pre ();

		return true;
	}

	if (n == "Type" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->Type_parser_;

		if (this->Type_parser_)
			this->Type_parser_->pre ();

		return true;
	}

	if (n == "StationCoord" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->StationCoord_parser_;

		if (this->StationCoord_parser_)
		{
			// Initialise
			this->StationCoord_parser_->InitparentStn(_dnaCurrentStn);
			this->StationCoord_parser_->pre ();
		}

		return true;
	}

	if (n == "Description" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->Description_parser_;

		if (this->Description_parser_)
			this->Description_parser_->pre ();

		return true;
	}

	return false;
}

bool DnaStation_pskel::_end_element_impl (const ::xml_schema::ro_string& ns,
	const ::xml_schema::ro_string& n)
{
	if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
		return true;

	if (n == "Name" && ns.empty ())
	{
		if (this->Name_parser_)
			this->Name (this->Name_parser_->post_string ());

		return true;
	}

	if (n == "Constraints" && ns.empty ())
	{
		if (this->Constraints_parser_)
			this->Constraints (this->Constraints_parser_->post_string ());

		return true;
	}

	if (n == "Type" && ns.empty ())
	{
		if (this->Type_parser_)
			this->Type (this->Type_parser_->post_string ());

		return true;
	}

	if (n == "StationCoord" && ns.empty ())
	{
		if (this->StationCoord_parser_)
		{
			this->StationCoord_parser_->post_StationCoord ();
			this->StationCoord ();
		}

		return true;
	}

	if (n == "Description" && ns.empty ())
	{
		if (this->Description_parser_)
			this->Description (this->Description_parser_->post_string ());

		return true;
	}

	return false;
}

// DnaXmlFormat_pskel
//

void DnaXmlFormat_pskel::DnaStation ()
{
}

void DnaXmlFormat_pskel::DnaMeasurement ()
{
}

void DnaXmlFormat_pskel::type ()
{
}

void DnaXmlFormat_pskel::referenceframe ()
{
	
}

void DnaXmlFormat_pskel::epoch ()
{
}

void DnaXmlFormat_pskel::post_DnaXmlFormat ()
{
}

bool DnaXmlFormat_pskel::_start_element_impl (const ::xml_schema::ro_string& ns,
	const ::xml_schema::ro_string& n,
	const ::xml_schema::ro_string* t)
{
	XSD_UNUSED (t);

	if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
		return true;

	if (n == "DnaStation" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->DnaStation_parser_;

		if (this->DnaStation_parser_)
		{
			this->DnaStation_parser_->InitparentStnVector(_pStns);
			
			// Set default reference frame and epoch for this measurement
			this->DnaStation_parser_->SetDefaultReferenceFrame(_referenceframe);
			this->DnaStation_parser_->SetDefaultEpoch(_epoch);

			this->DnaStation_parser_->pre ();
		}

		return true;
	}

	if (n == "DnaMeasurement" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->DnaMeasurement_parser_;

		if (this->DnaMeasurement_parser_)
		{
			this->DnaMeasurement_parser_->InitparentMsrCounter(&(_measurement_count));
			this->DnaMeasurement_parser_->InitparentMsrVector(_pMsrs);
			this->DnaMeasurement_parser_->InitparentClusterID(&(_clusterID));
			// Set default reference frame and epoch for this measurement
			this->DnaMeasurement_parser_->SetDefaultReferenceFrame(_referenceframe, _overridereferenceframe);
			this->DnaMeasurement_parser_->SetDefaultEpoch(_epoch);

			this->DnaMeasurement_parser_->pre ();
		}

		return true;
	}

	return false;
}

bool DnaXmlFormat_pskel::_end_element_impl (const ::xml_schema::ro_string& ns,
	const ::xml_schema::ro_string& n)
{
	if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
		return true;

	if (n == "DnaStation" && ns.empty ())
	{
		if (this->DnaStation_parser_)
		{
			this->DnaStation_parser_->post_DnaStation ();
			this->DnaStation ();
		}

		return true;
	}

	if (n == "DnaMeasurement" && ns.empty ())
	{
		if (this->DnaMeasurement_parser_)
		{
			this->DnaMeasurement_parser_->post_DnaMeasurement ();
			this->DnaMeasurement ();
		}

		return true;
	}

	return false;
}

bool DnaXmlFormat_pskel::_attribute_impl (const ::xml_schema::ro_string& ns,
	const ::xml_schema::ro_string& n,
	const ::xml_schema::ro_string& v)
{
	if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
		return true;

	if (n == "type" && ns.empty ())
	{
		if (this->type_parser_)
		{
			this->type_parser_->pre ();
			this->type_parser_->_pre_impl ();
			this->type_parser_->_characters (v);
			this->type_parser_->_post_impl ();
			this->type_parser_->post_type ();
			this->type ();
		}

		return true;
	}

	// Note that if the DnaXmlFormat element in the XML file does not contain an
	// attribute named epoch, the default will be set to whatever is in the XSD file.
	// For DynaML.xsd, the following is specified:
	//     <xs:attribute name="epoch" type="xs:string" use="optional" default="01.01.1994"/>
	// In this case, the following will be true
	if (n == "epoch" && ns.empty ())
	{
		if (this->epoch_parser_)
		{
			this->epoch_parser_->pre ();
			this->epoch_parser_->_pre_impl ();
			this->epoch_parser_->_characters (v);
			this->epoch_parser_->_post_impl ();
			this->epoch_parser_->post_type (_epoch, _userspecifiedreferenceframe, _overridereferenceframe);
			this->epoch();
		}

		return true;
	}

	// Note that if the DnaXmlFormat element in the XML file does not contain an
	// attribute named referenceframe, the default will be set to whatever is in the XSD file.
	// For DynaML.xsd, the following is specified:
	//     <xs:attribute name="referenceframe" type="xs:string" use="optional" default="GDA94"/>
	// In this case, the following will be true
	if (n == "referenceframe" && ns.empty ())
	{
		if (this->referenceframe_parser_)
		{
			this->referenceframe_parser_->pre ();
			this->referenceframe_parser_->_pre_impl ();
			this->referenceframe_parser_->_characters (v);
			this->referenceframe_parser_->_post_impl ();
			this->referenceframe_parser_->post_type (_referenceframe, _userspecifiedreferenceframe,  _overridereferenceframe);
			this->referenceframe ();


		}

		return true;
	}

	return false;
}

// GPSBaseline_pskel
//

void GPSBaseline_pskel::X (const ::std::string&)
{
}

void GPSBaseline_pskel::Y (const ::std::string&)
{
}

void GPSBaseline_pskel::Z (const ::std::string&)
{
}

void GPSBaseline_pskel::MeasurementDBID(const ::std::string&)
{
}

void GPSBaseline_pskel::SigmaXX (const ::std::string&)
{
}

void GPSBaseline_pskel::SigmaXY (const ::std::string&)
{
}

void GPSBaseline_pskel::SigmaXZ (const ::std::string&)
{
}

void GPSBaseline_pskel::SigmaYY (const ::std::string&)
{
}

void GPSBaseline_pskel::SigmaYZ (const ::std::string&)
{
}

void GPSBaseline_pskel::SigmaZZ (const ::std::string&)
{
}

void GPSBaseline_pskel::GPSCovariance ()
{
}

void GPSBaseline_pskel::post_GPSBaseline ()
{
}

bool GPSBaseline_pskel::_start_element_impl (const ::xml_schema::ro_string& ns,
	const ::xml_schema::ro_string& n,
	const ::xml_schema::ro_string* t)
{
	XSD_UNUSED (t);

	if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
		return true;

	if (n == "X" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->X_parser_;

		if (this->X_parser_)
			this->X_parser_->pre ();

		return true;
	}

	if (n == "Y" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->Y_parser_;

		if (this->Y_parser_)
			this->Y_parser_->pre ();

		return true;
	}

	if (n == "Z" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->Z_parser_;

		if (this->Z_parser_)
			this->Z_parser_->pre ();

		return true;
	}

	if (n == "MeasurementID" && ns.empty())
	{
		this->::xml_schema::complex_content::context_.top().parser_ = this->MeasurementDBID_parser_;

		if (this->MeasurementDBID_parser_)
			this->MeasurementDBID_parser_->pre();

		return true;
	}

	if (n == "SigmaXX" && ns.empty())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->SigmaXX_parser_;

		if (this->SigmaXX_parser_)
			this->SigmaXX_parser_->pre ();

		return true;
	}

	if (n == "SigmaXY" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->SigmaXY_parser_;

		if (this->SigmaXY_parser_)
			this->SigmaXY_parser_->pre ();

		return true;
	}

	if (n == "SigmaXZ" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->SigmaXZ_parser_;

		if (this->SigmaXZ_parser_)
			this->SigmaXZ_parser_->pre ();

		return true;
	}

	if (n == "SigmaYY" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->SigmaYY_parser_;

		if (this->SigmaYY_parser_)
			this->SigmaYY_parser_->pre ();

		return true;
	}

	if (n == "SigmaYZ" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->SigmaYZ_parser_;

		if (this->SigmaYZ_parser_)
			this->SigmaYZ_parser_->pre ();

		return true;
	}

	if (n == "SigmaZZ" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->SigmaZZ_parser_;

		if (this->SigmaZZ_parser_)
			this->SigmaZZ_parser_->pre ();

		return true;
	}

	if (n == "GPSCovariance" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->GPSCovariance_parser_;

		if (this->GPSCovariance_parser_)
		{
			this->GPSCovariance_parser_->InitparentGpsBaseline(_dnaGpsBaseline);
			this->GPSCovariance_parser_->pre ();
		}

		return true;
	}

	return false;
}

bool GPSBaseline_pskel::_end_element_impl (const ::xml_schema::ro_string& ns,
	const ::xml_schema::ro_string& n)
{
	if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
		return true;

	if (n == "X" && ns.empty ())
	{
		if (this->X_parser_)
			this->X (this->X_parser_->post_string ());

		return true;
	}

	if (n == "Y" && ns.empty ())
	{
		if (this->Y_parser_)
			this->Y (this->Y_parser_->post_string ());

		return true;
	}

	if (n == "Z" && ns.empty ())
	{
		if (this->Z_parser_)
			this->Z (this->Z_parser_->post_string ());

		return true;
	}

	if (n == "MeasurementID" && ns.empty())
	{
		if (this->MeasurementDBID_parser_)
			this->MeasurementDBID (this->MeasurementDBID_parser_->post_string());

		return true;
	}

	if (n == "SigmaXX" && ns.empty())
	{
		if (this->SigmaXX_parser_)
			this->SigmaXX (this->SigmaXX_parser_->post_string ());

		return true;
	}

	if (n == "SigmaXY" && ns.empty ())
	{
		if (this->SigmaXY_parser_)
			this->SigmaXY (this->SigmaXY_parser_->post_string ());

		return true;
	}

	if (n == "SigmaXZ" && ns.empty ())
	{
		if (this->SigmaXZ_parser_)
			this->SigmaXZ (this->SigmaXZ_parser_->post_string ());

		return true;
	}

	if (n == "SigmaYY" && ns.empty ())
	{
		if (this->SigmaYY_parser_)
			this->SigmaYY (this->SigmaYY_parser_->post_string ());

		return true;
	}

	if (n == "SigmaYZ" && ns.empty ())
	{
		if (this->SigmaYZ_parser_)
			this->SigmaYZ (this->SigmaYZ_parser_->post_string ());

		return true;
	}

	if (n == "SigmaZZ" && ns.empty ())
	{
		if (this->SigmaZZ_parser_)
			this->SigmaZZ (this->SigmaZZ_parser_->post_string ());

		return true;
	}

	if (n == "GPSCovariance" && ns.empty ())
	{
		if (this->GPSCovariance_parser_)
		{
			this->GPSCovariance_parser_->post_GPSCovariance ();
			this->GPSCovariance ();
		}

		return true;
	}

	return false;
}

// GPSCovariance_pskel
//

void GPSCovariance_pskel::m11 (const ::std::string&)
{
}

void GPSCovariance_pskel::m12 (const ::std::string&)
{
}

void GPSCovariance_pskel::m13 (const ::std::string&)
{
}

void GPSCovariance_pskel::m21 (const ::std::string&)
{
}

void GPSCovariance_pskel::m22 (const ::std::string&)
{
}

void GPSCovariance_pskel::m23 (const ::std::string&)
{
}

void GPSCovariance_pskel::m31 (const ::std::string&)
{
}

void GPSCovariance_pskel::m32 (const ::std::string&)
{
}

void GPSCovariance_pskel::m33 (const ::std::string&)
{
}

void GPSCovariance_pskel::post_GPSCovariance ()
{
}

bool GPSCovariance_pskel::_start_element_impl (const ::xml_schema::ro_string& ns,
	const ::xml_schema::ro_string& n,
	const ::xml_schema::ro_string* t)
{
	XSD_UNUSED (t);

	if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
		return true;

	if (n == "m11" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->m11_parser_;

		if (this->m11_parser_)
			this->m11_parser_->pre ();

		return true;
	}

	if (n == "m12" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->m12_parser_;

		if (this->m12_parser_)
			this->m12_parser_->pre ();

		return true;
	}

	if (n == "m13" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->m13_parser_;

		if (this->m13_parser_)
			this->m13_parser_->pre ();

		return true;
	}

	if (n == "m21" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->m21_parser_;

		if (this->m21_parser_)
			this->m21_parser_->pre ();

		return true;
	}

	if (n == "m22" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->m22_parser_;

		if (this->m22_parser_)
			this->m22_parser_->pre ();

		return true;
	}

	if (n == "m23" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->m23_parser_;

		if (this->m23_parser_)
			this->m23_parser_->pre ();

		return true;
	}

	if (n == "m31" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->m31_parser_;

		if (this->m31_parser_)
			this->m31_parser_->pre ();

		return true;
	}

	if (n == "m32" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->m32_parser_;

		if (this->m32_parser_)
			this->m32_parser_->pre ();

		return true;
	}

	if (n == "m33" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->m33_parser_;

		if (this->m33_parser_)
			this->m33_parser_->pre ();

		return true;
	}

	return false;
}

bool GPSCovariance_pskel::_end_element_impl (const ::xml_schema::ro_string& ns,
	const ::xml_schema::ro_string& n)
{
	if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
		return true;

	if (n == "m11" && ns.empty ())
	{
		if (this->m11_parser_)
			this->m11 (this->m11_parser_->post_string ());

		return true;
	}

	if (n == "m12" && ns.empty ())
	{
		if (this->m12_parser_)
			this->m12 (this->m12_parser_->post_string ());

		return true;
	}

	if (n == "m13" && ns.empty ())
	{
		if (this->m13_parser_)
			this->m13 (this->m13_parser_->post_string ());

		return true;
	}

	if (n == "m21" && ns.empty ())
	{
		if (this->m21_parser_)
			this->m21 (this->m21_parser_->post_string ());

		return true;
	}

	if (n == "m22" && ns.empty ())
	{
		if (this->m22_parser_)
			this->m22 (this->m22_parser_->post_string ());

		return true;
	}

	if (n == "m23" && ns.empty ())
	{
		if (this->m23_parser_)
			this->m23 (this->m23_parser_->post_string ());

		return true;
	}

	if (n == "m31" && ns.empty ())
	{
		if (this->m31_parser_)
			this->m31 (this->m31_parser_->post_string ());

		return true;
	}

	if (n == "m32" && ns.empty ())
	{
		if (this->m32_parser_)
			this->m32 (this->m32_parser_->post_string ());

		return true;
	}

	if (n == "m33" && ns.empty ())
	{
		if (this->m33_parser_)
			this->m33 (this->m33_parser_->post_string ());

		return true;
	}

	return false;
}

// Height_pskel
//

void Height_pskel::system (const ::std::string&)
{
}

void Height_pskel::post_Height ()
{
}

bool Height_pskel::_attribute_impl (const ::xml_schema::ro_string& ns,
	const ::xml_schema::ro_string& n,
	const ::xml_schema::ro_string& v)
{
	if (this->::xml_schema::string_pskel::_attribute_impl (ns, n, v))
		return true;

	if (n == "system" && ns.empty ())
	{
		if (this->system_parser_)
		{
			this->system_parser_->pre ();
			this->system_parser_->_pre_impl ();
			this->system_parser_->_characters (v);
			this->system_parser_->_post_impl ();
			this->system (this->system_parser_->post_string ());
		}

		return true;
	}

	return false;
}

// PointCovariance_pskel
//

void PointCovariance_pskel::m11 (const ::std::string&)
{
}

void PointCovariance_pskel::m12 (const ::std::string&)
{
}

void PointCovariance_pskel::m13 (const ::std::string&)
{
}

void PointCovariance_pskel::m21 (const ::std::string&)
{
}

void PointCovariance_pskel::m22 (const ::std::string&)
{
}

void PointCovariance_pskel::m23 (const ::std::string&)
{
}

void PointCovariance_pskel::m31 (const ::std::string&)
{
}

void PointCovariance_pskel::m32 (const ::std::string&)
{
}

void PointCovariance_pskel::m33 (const ::std::string&)
{
}

void PointCovariance_pskel::post_PointCovariance ()
{
}

bool PointCovariance_pskel::_start_element_impl (const ::xml_schema::ro_string& ns,
	const ::xml_schema::ro_string& n,
	const ::xml_schema::ro_string* t)
{
	XSD_UNUSED (t);

	if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
		return true;

	if (n == "m11" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->m11_parser_;

		if (this->m11_parser_)
			this->m11_parser_->pre ();

		return true;
	}

	if (n == "m12" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->m12_parser_;

		if (this->m12_parser_)
			this->m12_parser_->pre ();

		return true;
	}

	if (n == "m13" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->m13_parser_;

		if (this->m13_parser_)
			this->m13_parser_->pre ();

		return true;
	}

	if (n == "m21" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->m21_parser_;

		if (this->m21_parser_)
			this->m21_parser_->pre ();

		return true;
	}

	if (n == "m22" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->m22_parser_;

		if (this->m22_parser_)
			this->m22_parser_->pre ();

		return true;
	}

	if (n == "m23" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->m23_parser_;

		if (this->m23_parser_)
			this->m23_parser_->pre ();

		return true;
	}

	if (n == "m31" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->m31_parser_;

		if (this->m31_parser_)
			this->m31_parser_->pre ();

		return true;
	}

	if (n == "m32" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->m32_parser_;

		if (this->m32_parser_)
			this->m32_parser_->pre ();

		return true;
	}

	if (n == "m33" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->m33_parser_;

		if (this->m33_parser_)
			this->m33_parser_->pre ();

		return true;
	}

	return false;
}

bool PointCovariance_pskel::_end_element_impl (const ::xml_schema::ro_string& ns,
	const ::xml_schema::ro_string& n)
{
	if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
		return true;

	if (n == "m11" && ns.empty ())
	{
		if (this->m11_parser_)
			this->m11 (this->m11_parser_->post_string ());

		return true;
	}

	if (n == "m12" && ns.empty ())
	{
		if (this->m12_parser_)
			this->m12 (this->m12_parser_->post_string ());

		return true;
	}

	if (n == "m13" && ns.empty ())
	{
		if (this->m13_parser_)
			this->m13 (this->m13_parser_->post_string ());

		return true;
	}

	if (n == "m21" && ns.empty ())
	{
		if (this->m21_parser_)
			this->m21 (this->m21_parser_->post_string ());

		return true;
	}

	if (n == "m22" && ns.empty ())
	{
		if (this->m22_parser_)
			this->m22 (this->m22_parser_->post_string ());

		return true;
	}

	if (n == "m23" && ns.empty ())
	{
		if (this->m23_parser_)
			this->m23 (this->m23_parser_->post_string ());

		return true;
	}

	if (n == "m31" && ns.empty ())
	{
		if (this->m31_parser_)
			this->m31 (this->m31_parser_->post_string ());

		return true;
	}

	if (n == "m32" && ns.empty ())
	{
		if (this->m32_parser_)
			this->m32 (this->m32_parser_->post_string ());

		return true;
	}

	if (n == "m33" && ns.empty ())
	{
		if (this->m33_parser_)
			this->m33 (this->m33_parser_->post_string ());

		return true;
	}

	return false;
}

// StationCoord_pskel
//

void StationCoord_pskel::Name (const ::std::string&)
{
}

void StationCoord_pskel::XAxis (const ::std::string&)
{
}

void StationCoord_pskel::YAxis (const ::std::string&)
{
}

void StationCoord_pskel::Height ()
{
}

void StationCoord_pskel::HemisphereZone (const ::std::string&)
{
}

void StationCoord_pskel::GeoidModel ()
{
}

void StationCoord_pskel::post_StationCoord ()
{
}

bool StationCoord_pskel::_start_element_impl (const ::xml_schema::ro_string& ns,
	const ::xml_schema::ro_string& n,
	const ::xml_schema::ro_string* t)
{
	XSD_UNUSED (t);

	if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
		return true;

	if (n == "Name" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->Name_parser_;

		if (this->Name_parser_)
			this->Name_parser_->pre ();

		return true;
	}

	if (n == "XAxis" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->XAxis_parser_;

		if (this->XAxis_parser_)
			this->XAxis_parser_->pre ();

		return true;
	}

	if (n == "YAxis" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->YAxis_parser_;

		if (this->YAxis_parser_)
			this->YAxis_parser_->pre ();

		return true;
	}

	if (n == "Height" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->Height_parser_;

		if (this->Height_parser_)
		{
			// Initialise
			this->Height_parser_->InitparentStn(_parent_dnaStn);
			this->Height_parser_->pre ();
		}

		return true;
	}

	if (n == "HemisphereZone" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->HemisphereZone_parser_;

		if (this->HemisphereZone_parser_)
			this->HemisphereZone_parser_->pre ();

		return true;
	}

	return false;
}

bool StationCoord_pskel::_end_element_impl (const ::xml_schema::ro_string& ns,
	const ::xml_schema::ro_string& n)
{
	if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
		return true;

	if (n == "Name" && ns.empty ())
	{
		if (this->Name_parser_)
			this->Name (this->Name_parser_->post_string ());

		return true;
	}

	if (n == "XAxis" && ns.empty ())
	{
		if (this->XAxis_parser_)
			this->XAxis (this->XAxis_parser_->post_string ());

		return true;
	}

	if (n == "YAxis" && ns.empty ())
	{
		if (this->YAxis_parser_)
			this->YAxis (this->YAxis_parser_->post_string ());

		return true;
	}

	if (n == "Height" && ns.empty ())
	{
		if (this->Height_parser_)
		{
			this->Height_parser_->post_Height ();
			this->Height ();
		}

		return true;
	}

	if (n == "HemisphereZone" && ns.empty ())
	{
		if (this->HemisphereZone_parser_)
			this->HemisphereZone (this->HemisphereZone_parser_->post_string ());

		return true;
	}

	return false;
}

// GeoidModel_pskel
//

void GeoidModel_pskel::NValue (const ::std::string&)
{
}

void GeoidModel_pskel::DeflPM (const ::std::string&)
{
}

void GeoidModel_pskel::DeflPV (const ::std::string&)
{
}

void GeoidModel_pskel::post_GeoidModel ()
{
}

bool GeoidModel_pskel::_start_element_impl (const ::xml_schema::ro_string& ns,
	const ::xml_schema::ro_string& n,
	const ::xml_schema::ro_string* t)
{
	XSD_UNUSED (t);

	if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
		return true;

	if (n == "NValue" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->NValue_parser_;

		if (this->NValue_parser_)
			this->NValue_parser_->pre ();

		return true;
	}

	if (n == "DeflPM" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->DeflPM_parser_;

		if (this->DeflPM_parser_)
			this->DeflPM_parser_->pre ();

		return true;
	}

	if (n == "DeflPV" && ns.empty ())
	{
		this->::xml_schema::complex_content::context_.top ().parser_ = this->DeflPV_parser_;

		if (this->DeflPV_parser_)
			this->DeflPV_parser_->pre ();

		return true;
	}

	return false;
}

bool GeoidModel_pskel::_end_element_impl (const ::xml_schema::ro_string& ns,
	const ::xml_schema::ro_string& n)
{
	if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
		return true;

	if (n == "NValue" && ns.empty ())
	{
		if (this->NValue_parser_)
			this->NValue (this->NValue_parser_->post_string ());

		return true;
	}

	if (n == "DeflPM" && ns.empty ())
	{
		if (this->DeflPM_parser_)
			this->DeflPM (this->DeflPM_parser_->post_string ());

		return true;
	}

	if (n == "DeflPV" && ns.empty ())
	{
		if (this->DeflPV_parser_)
			this->DeflPV (this->DeflPV_parser_->post_string ());

		return true;
	}

	return false;
}

// type_pskel
//

void type_pskel::post_type ()
{
}

// referenceframe_pskel
//

void referenceframe_pskel::post_type (string& referenceframe, bool user_specified, bool override_referenceframe)
{

}

// epoch_pskel
//

void epoch_pskel::post_type (string& epoch, bool user_specified, bool override_referenceframe)
{
}

// system_pskel
//

void system_pskel::post_system ()
{
}

// Begin epilogue.
//
//
// End epilogue.

