// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef DYNA_ML_PSKEL_HXX
#define DYNA_ML_PSKEL_HXX


#if defined(_MSC_VER)
#if defined(LIST_INCLUDES_ON_BUILD) 
#pragma message("  " __FILE__) 
#endif
#endif


// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

//#if (XSD_INT_VERSION != 3030000L)
//#if (XSD_INT_VERSION != 4000000L)
#if (XSD_INT_VERSION > 4009911L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

// Forward declarations
//
class Clusterpoint_pskel;
class Directions_pskel;
class DnaMeasurement_pskel;
class DnaStation_pskel;
class DnaXmlFormat_pskel;
class GPSBaseline_pskel;
class GPSCovariance_pskel;
class Height_pskel;
class PointCovariance_pskel;
class StationCoord_pskel;
class GeoidModel_pskel;
class type_pskel;
class referenceframe_pskel;
class epoch_pskel;
class source_pskel;
class system_pskel;

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_PARSER_USE_CHAR
#define XSD_CXX_PARSER_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>
#include <xsd/cxx/xml/error-handler.hxx>
#include <xsd/cxx/parser/exceptions.hxx>
#include <xsd/cxx/parser/elements.hxx>
#include <xsd/cxx/parser/xml-schema.hxx>
#include <xsd/cxx/parser/non-validating/parser.hxx>
#include <xsd/cxx/parser/non-validating/xml-schema-pskel.hxx>
#include <xsd/cxx/parser/non-validating/xml-schema-pimpl.hxx>
#include <xsd/cxx/parser/xerces/elements.hxx>

#include <include/measurement_types/dnameasurement.hpp>
#include <include/measurement_types/dnastation.hpp>

#include <boost/shared_ptr.hpp>

using namespace std;
using namespace boost;
using namespace dynadjust::measurements;

namespace xml_schema
{
	// Built-in XML Schema types mapping.
	//
	typedef ::xsd::cxx::parser::string_sequence< char > string_sequence;
	typedef ::xsd::cxx::parser::qname< char > qname;
	typedef ::xsd::cxx::parser::buffer buffer;
	typedef ::xsd::cxx::parser::time_zone time_zone;
	typedef ::xsd::cxx::parser::gday gday;
	typedef ::xsd::cxx::parser::gmonth gmonth;
	typedef ::xsd::cxx::parser::gyear gyear;
	typedef ::xsd::cxx::parser::gmonth_day gmonth_day;
	typedef ::xsd::cxx::parser::gyear_month gyear_month;
	typedef ::xsd::cxx::parser::date date;
	typedef ::xsd::cxx::parser::time time;
	typedef ::xsd::cxx::parser::date_time date_time;
	typedef ::xsd::cxx::parser::duration duration;

	// Base parser skeletons.
	//
	typedef ::xsd::cxx::parser::parser_base< char > parser_base;
	typedef ::xsd::cxx::parser::non_validating::empty_content< char > empty_content;
	typedef ::xsd::cxx::parser::non_validating::simple_content< char > simple_content;
	typedef ::xsd::cxx::parser::non_validating::complex_content< char > complex_content;
	typedef ::xsd::cxx::parser::non_validating::list_base< char > list_base;

	// Parser skeletons and implementations for the XML Schema
	// built-in types.
	//
	typedef ::xsd::cxx::parser::non_validating::any_type_pskel< char > any_type_pskel;
	typedef ::xsd::cxx::parser::non_validating::any_type_pimpl< char > any_type_pimpl;

	typedef ::xsd::cxx::parser::non_validating::any_simple_type_pskel< char > any_simple_type_pskel;
	typedef ::xsd::cxx::parser::non_validating::any_simple_type_pimpl< char > any_simple_type_pimpl;

	typedef ::xsd::cxx::parser::non_validating::byte_pskel< char > byte_pskel;
	typedef ::xsd::cxx::parser::non_validating::byte_pimpl< char > byte_pimpl;

	typedef ::xsd::cxx::parser::non_validating::unsigned_byte_pskel< char > unsigned_byte_pskel;
	typedef ::xsd::cxx::parser::non_validating::unsigned_byte_pimpl< char > unsigned_byte_pimpl;

	typedef ::xsd::cxx::parser::non_validating::short_pskel< char > short_pskel;
	typedef ::xsd::cxx::parser::non_validating::short_pimpl< char > short_pimpl;

	typedef ::xsd::cxx::parser::non_validating::unsigned_short_pskel< char > unsigned_short_pskel;
	typedef ::xsd::cxx::parser::non_validating::unsigned_short_pimpl< char > unsigned_short_pimpl;

	typedef ::xsd::cxx::parser::non_validating::int_pskel< char > int_pskel;
	typedef ::xsd::cxx::parser::non_validating::int_pimpl< char > int_pimpl;

	typedef ::xsd::cxx::parser::non_validating::unsigned_int_pskel< char > unsigned_int_pskel;
	typedef ::xsd::cxx::parser::non_validating::unsigned_int_pimpl< char > unsigned_int_pimpl;

	typedef ::xsd::cxx::parser::non_validating::long_pskel< char > long_pskel;
	typedef ::xsd::cxx::parser::non_validating::long_pimpl< char > long_pimpl;

	typedef ::xsd::cxx::parser::non_validating::unsigned_long_pskel< char > unsigned_long_pskel;
	typedef ::xsd::cxx::parser::non_validating::unsigned_long_pimpl< char > unsigned_long_pimpl;

	typedef ::xsd::cxx::parser::non_validating::integer_pskel< char > integer_pskel;
	typedef ::xsd::cxx::parser::non_validating::integer_pimpl< char > integer_pimpl;

	typedef ::xsd::cxx::parser::non_validating::non_positive_integer_pskel< char > non_positive_integer_pskel;
	typedef ::xsd::cxx::parser::non_validating::non_positive_integer_pimpl< char > non_positive_integer_pimpl;

	typedef ::xsd::cxx::parser::non_validating::non_negative_integer_pskel< char > non_negative_integer_pskel;
	typedef ::xsd::cxx::parser::non_validating::non_negative_integer_pimpl< char > non_negative_integer_pimpl;

	typedef ::xsd::cxx::parser::non_validating::positive_integer_pskel< char > positive_integer_pskel;
	typedef ::xsd::cxx::parser::non_validating::positive_integer_pimpl< char > positive_integer_pimpl;

	typedef ::xsd::cxx::parser::non_validating::negative_integer_pskel< char > negative_integer_pskel;
	typedef ::xsd::cxx::parser::non_validating::negative_integer_pimpl< char > negative_integer_pimpl;

	typedef ::xsd::cxx::parser::non_validating::boolean_pskel< char > boolean_pskel;
	typedef ::xsd::cxx::parser::non_validating::boolean_pimpl< char > boolean_pimpl;

	typedef ::xsd::cxx::parser::non_validating::float_pskel< char > float_pskel;
	typedef ::xsd::cxx::parser::non_validating::float_pimpl< char > float_pimpl;

	typedef ::xsd::cxx::parser::non_validating::double_pskel< char > double_pskel;
	typedef ::xsd::cxx::parser::non_validating::double_pimpl< char > double_pimpl;

	typedef ::xsd::cxx::parser::non_validating::decimal_pskel< char > decimal_pskel;
	typedef ::xsd::cxx::parser::non_validating::decimal_pimpl< char > decimal_pimpl;

	typedef ::xsd::cxx::parser::non_validating::string_pskel< char > string_pskel;
	typedef ::xsd::cxx::parser::non_validating::string_pimpl< char > string_pimpl;

	typedef ::xsd::cxx::parser::non_validating::normalized_string_pskel< char > normalized_string_pskel;
	typedef ::xsd::cxx::parser::non_validating::normalized_string_pimpl< char > normalized_string_pimpl;

	typedef ::xsd::cxx::parser::non_validating::token_pskel< char > token_pskel;
	typedef ::xsd::cxx::parser::non_validating::token_pimpl< char > token_pimpl;

	typedef ::xsd::cxx::parser::non_validating::name_pskel< char > name_pskel;
	typedef ::xsd::cxx::parser::non_validating::name_pimpl< char > name_pimpl;

	typedef ::xsd::cxx::parser::non_validating::nmtoken_pskel< char > nmtoken_pskel;
	typedef ::xsd::cxx::parser::non_validating::nmtoken_pimpl< char > nmtoken_pimpl;

	typedef ::xsd::cxx::parser::non_validating::nmtokens_pskel< char > nmtokens_pskel;
	typedef ::xsd::cxx::parser::non_validating::nmtokens_pimpl< char > nmtokens_pimpl;

	typedef ::xsd::cxx::parser::non_validating::ncname_pskel< char > ncname_pskel;
	typedef ::xsd::cxx::parser::non_validating::ncname_pimpl< char > ncname_pimpl;

	typedef ::xsd::cxx::parser::non_validating::language_pskel< char > language_pskel;
	typedef ::xsd::cxx::parser::non_validating::language_pimpl< char > language_pimpl;

	typedef ::xsd::cxx::parser::non_validating::id_pskel< char > id_pskel;
	typedef ::xsd::cxx::parser::non_validating::id_pimpl< char > id_pimpl;

	typedef ::xsd::cxx::parser::non_validating::idref_pskel< char > idref_pskel;
	typedef ::xsd::cxx::parser::non_validating::idref_pimpl< char > idref_pimpl;

	typedef ::xsd::cxx::parser::non_validating::idrefs_pskel< char > idrefs_pskel;
	typedef ::xsd::cxx::parser::non_validating::idrefs_pimpl< char > idrefs_pimpl;

	typedef ::xsd::cxx::parser::non_validating::uri_pskel< char > uri_pskel;
	typedef ::xsd::cxx::parser::non_validating::uri_pimpl< char > uri_pimpl;

	typedef ::xsd::cxx::parser::non_validating::qname_pskel< char > qname_pskel;
	typedef ::xsd::cxx::parser::non_validating::qname_pimpl< char > qname_pimpl;

	typedef ::xsd::cxx::parser::non_validating::base64_binary_pskel< char > base64_binary_pskel;
	typedef ::xsd::cxx::parser::non_validating::base64_binary_pimpl< char > base64_binary_pimpl;

	typedef ::xsd::cxx::parser::non_validating::hex_binary_pskel< char > hex_binary_pskel;
	typedef ::xsd::cxx::parser::non_validating::hex_binary_pimpl< char > hex_binary_pimpl;

	typedef ::xsd::cxx::parser::non_validating::date_pskel< char > date_pskel;
	typedef ::xsd::cxx::parser::non_validating::date_pimpl< char > date_pimpl;

	typedef ::xsd::cxx::parser::non_validating::date_time_pskel< char > date_time_pskel;
	typedef ::xsd::cxx::parser::non_validating::date_time_pimpl< char > date_time_pimpl;

	typedef ::xsd::cxx::parser::non_validating::duration_pskel< char > duration_pskel;
	typedef ::xsd::cxx::parser::non_validating::duration_pimpl< char > duration_pimpl;

	typedef ::xsd::cxx::parser::non_validating::gday_pskel< char > gday_pskel;
	typedef ::xsd::cxx::parser::non_validating::gday_pimpl< char > gday_pimpl;

	typedef ::xsd::cxx::parser::non_validating::gmonth_pskel< char > gmonth_pskel;
	typedef ::xsd::cxx::parser::non_validating::gmonth_pimpl< char > gmonth_pimpl;

	typedef ::xsd::cxx::parser::non_validating::gmonth_day_pskel< char > gmonth_day_pskel;
	typedef ::xsd::cxx::parser::non_validating::gmonth_day_pimpl< char > gmonth_day_pimpl;

	typedef ::xsd::cxx::parser::non_validating::gyear_pskel< char > gyear_pskel;
	typedef ::xsd::cxx::parser::non_validating::gyear_pimpl< char > gyear_pimpl;

	typedef ::xsd::cxx::parser::non_validating::gyear_month_pskel< char > gyear_month_pskel;
	typedef ::xsd::cxx::parser::non_validating::gyear_month_pimpl< char > gyear_month_pimpl;

	typedef ::xsd::cxx::parser::non_validating::time_pskel< char > time_pskel;
	typedef ::xsd::cxx::parser::non_validating::time_pimpl< char > time_pimpl;

	// Exceptions. See libxsd/xsd/cxx/parser/exceptions.hxx for details.
	//
	typedef ::xsd::cxx::parser::exception< char > exception;

	// Parsing diagnostics.
	//
	typedef ::xsd::cxx::parser::severity severity;
	typedef ::xsd::cxx::parser::error< char > error;
	typedef ::xsd::cxx::parser::diagnostics< char > diagnostics;
	typedef ::xsd::cxx::parser::parsing< char > parsing;

	// Error handler. See libxsd/xsd/cxx/xml/error-handler.hxx for details.
	//
	typedef ::xsd::cxx::xml::error_handler< char > error_handler;

	// Read-only string.
	//
	typedef ::xsd::cxx::ro_string< char > ro_string;

	// Parsing flags. See libxsd/xsd/cxx/parser/xerces/elements.hxx
	// for details.
	//
	typedef ::xsd::cxx::parser::xerces::flags flags;

	// Parsing properties. See libxsd/xsd/cxx/parser/xerces/elements.hxx
	// for details.
	//
	typedef ::xsd::cxx::parser::xerces::properties< char > properties;

	// Document type. See libxsd/xsd/cxx/parser/xerces/elements.hxx
	// for details.
	//
	typedef ::xsd::cxx::parser::xerces::document< char > document;
}

class Clusterpoint_pskel: public ::xml_schema::complex_content
{
public:
	// Parser callbacks. Override them in your implementation.
	//
	// virtual void
	// pre ();

	virtual void X (const ::std::string&);
	virtual void Y (const ::std::string&);
	virtual void Z (const ::std::string&);
	virtual void MeasurementDBID (const ::std::string&);
	virtual void SigmaXX (const ::std::string&);
	virtual void SigmaXY (const ::std::string&);
	virtual void SigmaXZ (const ::std::string&);
	virtual void SigmaYY (const ::std::string&);
	virtual void SigmaYZ (const ::std::string&);
	virtual void SigmaZZ (const ::std::string&);
	virtual void PointCovariance ();
	virtual void post_Clusterpoint ();

	// Parser construction API.
	//
	void X_parser (::xml_schema::string_pskel&);
	void Y_parser (::xml_schema::string_pskel&);
	void Z_parser (::xml_schema::string_pskel&);
	void MeasurementDBID_parser (::xml_schema::string_pskel&);
	void SigmaXX_parser (::xml_schema::string_pskel&);
	void SigmaXY_parser (::xml_schema::string_pskel&);
	void SigmaXZ_parser (::xml_schema::string_pskel&);
	void SigmaYY_parser (::xml_schema::string_pskel&);
	void SigmaYZ_parser (::xml_schema::string_pskel&);
	void SigmaZZ_parser (::xml_schema::string_pskel&);
	void PointCovariance_parser (::PointCovariance_pskel&);

	void parsers (
			::xml_schema::string_pskel& /* X */,
			::xml_schema::string_pskel& /* Y */,
			::xml_schema::string_pskel& /* Z */,
			::xml_schema::string_pskel& /* MeasurementDBID */,
			::xml_schema::string_pskel& /* SigmaXX */,
			::xml_schema::string_pskel& /* SigmaXY */,
			::xml_schema::string_pskel& /* SigmaXZ */,
			::xml_schema::string_pskel& /* SigmaYY */,
			::xml_schema::string_pskel& /* SigmaYZ */,
			::xml_schema::string_pskel& /* SigmaZZ */,
			::PointCovariance_pskel& /* PointCovariance */);

	// Constructor.
	//
	Clusterpoint_pskel ();

	// Initialisation
	inline void InitparentGpsPointCluster(dnaMsrPtr pGpsPointCluster) {	_parent_dnaGpsPointCluster = pGpsPointCluster; }
	inline void InitparentMsrCounter(PUINT32 pMsrCounter) { _pMeasurementCount = pMsrCounter; }

	// Implementation.
	//
protected:
	virtual bool
		_start_element_impl (const ::xml_schema::ro_string&,
		const ::xml_schema::ro_string&,
		const ::xml_schema::ro_string*);

	virtual bool
		_end_element_impl (const ::xml_schema::ro_string&,
		const ::xml_schema::ro_string&);

protected:
	::xml_schema::string_pskel* X_parser_;
	::xml_schema::string_pskel* Y_parser_;
	::xml_schema::string_pskel* Z_parser_;
	::xml_schema::string_pskel* MeasurementDBID_parser_;
	::xml_schema::string_pskel* SigmaXX_parser_;
	::xml_schema::string_pskel* SigmaXY_parser_;
	::xml_schema::string_pskel* SigmaXZ_parser_;
	::xml_schema::string_pskel* SigmaYY_parser_;
	::xml_schema::string_pskel* SigmaYZ_parser_;
	::xml_schema::string_pskel* SigmaZZ_parser_;
	::PointCovariance_pskel* PointCovariance_parser_;

	dnaMsrPtr _dnaGpsPoint;
	dnaMsrPtr _parent_dnaGpsPointCluster;
	PUINT32 _pMeasurementCount;
};

class Directions_pskel: public ::xml_schema::complex_content
{
public:
	// Parser callbacks. Override them in your implementation.
	//
	// virtual void
	// pre ();

	virtual void Ignore (const ::std::string&);
	virtual void Target (const ::std::string&);
	virtual void Value (const ::std::string&);
	virtual void StdDev (const ::std::string&);
	virtual void MeasurementDBID (const ::std::string&);
	virtual void post_Directions ();

	// Parser construction API.
	//
	void Ignore_parser (::xml_schema::string_pskel&);
	void Target_parser (::xml_schema::string_pskel&);
	void Value_parser (::xml_schema::string_pskel&);
	void StdDev_parser (::xml_schema::string_pskel&);
	void MeasurementDBID_parser (::xml_schema::string_pskel&);
	void parsers (
			::xml_schema::string_pskel& /* Ignore */,
			::xml_schema::string_pskel& /* Target */,
			::xml_schema::string_pskel& /* Value */,
			::xml_schema::string_pskel& /* StdDev */,
			::xml_schema::string_pskel& /* MeasurementDBID */);

	// Constructor.
	//
	Directions_pskel ();

	// Initialisation
	inline void InitparentDirnSet(dnaMsrPtr pDirectionSet) { _parent_dnaDirectionSet = pDirectionSet; }
	inline void InitparentMsrCounter(PUINT32 pMsrCounter) {	_pMeasurementCount = pMsrCounter; }

	// Implementation.
	//
protected:
	virtual bool
		_start_element_impl (const ::xml_schema::ro_string&,
		const ::xml_schema::ro_string&,
		const ::xml_schema::ro_string*);

	virtual bool
		_end_element_impl (const ::xml_schema::ro_string&,
		const ::xml_schema::ro_string&);

protected:
	::xml_schema::string_pskel* Ignore_parser_;
	::xml_schema::string_pskel* Target_parser_;
	::xml_schema::string_pskel* Value_parser_;
	::xml_schema::string_pskel* StdDev_parser_;
	::xml_schema::string_pskel* MeasurementDBID_parser_;

	dnaMsrPtr _dnaDirection;
	dnaMsrPtr _parent_dnaDirectionSet;
	PUINT32 _pMeasurementCount;
};

class DnaMeasurement_pskel: public ::xml_schema::complex_content
{
public:
	// Parser callbacks. Override them in your implementation.
	//
	// virtual void
	// pre ();

	virtual void Type (const ::std::string&);
	virtual void Ignore (const ::std::string&);
	virtual void First (const ::std::string&);
	virtual void Second (const ::std::string&);
	virtual void Third (const ::std::string&);
	virtual void Value (const ::std::string&);
	virtual void StdDev (const ::std::string&);
	virtual void InstHeight (const ::std::string&);
	virtual void TargHeight (const ::std::string&);
	virtual void Total (const ::std::string&);
	virtual void Directions ();
	virtual void Vscale (const ::std::string&);
	virtual void Epoch (const ::std::string&);
	virtual void ReferenceFrame (const ::std::string&);
	virtual void GPSBaseline ();
	virtual void Hscale (const ::std::string&);
	virtual void Lscale (const ::std::string&);
	virtual void Pscale (const ::std::string&);
	virtual void Clusterpoint ();
	virtual void Coords (const ::std::string&);
	virtual void Source (const ::std::string&);
	virtual void MeasurementDBID (const ::std::string&);
	virtual void ClusterDBID (const ::std::string&);
	virtual void post_DnaMeasurement ();

	// Initialisation
	inline void SetDefaultReferenceFrame(string& referenceframe, bool overridereferenceframe) { 
		_referenceframe = referenceframe;
		_overridereferenceframe = overridereferenceframe;
	}
	
	inline void SetDefaultEpoch(string& epoch) { 
		_epoch = epoch; 
	}

	inline void InitparentMsrVector(vdnaMsrPtr* pMsrs) { _vParentMsrs = pMsrs; }
	inline void InitparentMsrCounter(PUINT32 pMsrCounter) { _pMeasurementCount = pMsrCounter; }
	inline void InitparentClusterID(PUINT32 pclusterID) { _pclusterID = pclusterID; }

	// Retrieval
	inline std::string Type()
	{
		return Type_parser_->post_string();
	}

	inline std::string First()
	{
		return First_parser_->post_string();
	}

	inline std::string Second()
	{
		return Second_parser_->post_string();
	}

	inline std::string Third()
	{
		return Third_parser_->post_string();
	}

	inline vdnaMsrPtr& MeasurementList()
	{
		return *_vParentMsrs;
	}

	inline std::string Source()
	{
		return Source_parser_->post_string();
	}

	inline std::string MeasurementDBID()
	{
		return MeasurementDBID_parser_->post_string();
	}

	inline std::string ClusterDBID()
	{
		return ClusterDBID_parser_->post_string();
	}

	// Parser construction API.
	//
	void Type_parser (::xml_schema::string_pskel&);
	void Ignore_parser (::xml_schema::string_pskel&);
	void First_parser (::xml_schema::string_pskel&);
	void Second_parser (::xml_schema::string_pskel&);
	void Third_parser (::xml_schema::string_pskel&);
	void Value_parser (::xml_schema::string_pskel&);
	void StdDev_parser (::xml_schema::string_pskel&);
	void InstHeight_parser (::xml_schema::string_pskel&);
	void TargHeight_parser (::xml_schema::string_pskel&);
	void Total_parser (::xml_schema::string_pskel&);
	void Directions_parser (::Directions_pskel&);
	void Vscale_parser (::xml_schema::string_pskel&);
	void Epoch_parser (::xml_schema::string_pskel&);
	void ReferenceFrame_parser (::xml_schema::string_pskel&);
	void GPSBaseline_parser (::GPSBaseline_pskel&);
	void Hscale_parser (::xml_schema::string_pskel&);
	void Lscale_parser (::xml_schema::string_pskel&);
	void Pscale_parser (::xml_schema::string_pskel&);
	void Clusterpoint_parser (::Clusterpoint_pskel&);
	void Coords_parser (::xml_schema::string_pskel&);
	void Source_parser (::xml_schema::string_pskel&);
	void MeasurementDBID_parser (::xml_schema::string_pskel&);
	void ClusterDBID_parser (::xml_schema::string_pskel&);

	void parsers (
			::xml_schema::string_pskel& /* Type */,
			::xml_schema::string_pskel& /* Ignore */,
			::xml_schema::string_pskel& /* First */,
			::xml_schema::string_pskel& /* Second */,
			::xml_schema::string_pskel& /* Third */,
			::xml_schema::string_pskel& /* Value */,
			::xml_schema::string_pskel& /* StdDev */,
			::xml_schema::string_pskel& /* InstHeight */,
			::xml_schema::string_pskel& /* TargHeight */,
			::xml_schema::string_pskel& /* Total */,
			::Directions_pskel& /* Directions */,
			::xml_schema::string_pskel& /* Vscale */,
			::xml_schema::string_pskel& /* Epoch */,
			::xml_schema::string_pskel& /* ReferenceFrame */,
			::GPSBaseline_pskel& /* GPSBaseline */,
			::xml_schema::string_pskel& /* Hscale */,
			::xml_schema::string_pskel& /* Lscale */,
			::xml_schema::string_pskel& /* Pscale */,
			::Clusterpoint_pskel& /* Clusterpoint */,
			::xml_schema::string_pskel& /* Coords */,
			::xml_schema::string_pskel& /* Source */,
			::xml_schema::string_pskel& /* MeasurementDBID */,
			::xml_schema::string_pskel& /* ClusterDBID */,
			bool preferSingleXasG = false);

	// Constructor.
	//
	DnaMeasurement_pskel ();

	// Implementation.
	//
protected:
	virtual bool
		_start_element_impl (const ::xml_schema::ro_string&,
		const ::xml_schema::ro_string&,
		const ::xml_schema::ro_string*);

	virtual bool
		_end_element_impl (const ::xml_schema::ro_string&,
		const ::xml_schema::ro_string&);

	virtual bool 
		_attribute_impl (const ::xml_schema::ro_string&,
		const ::xml_schema::ro_string&, 
		const ::xml_schema::ro_string&);

protected:
	::xml_schema::string_pskel* Type_parser_;
	::xml_schema::string_pskel* Ignore_parser_;
	::xml_schema::string_pskel* First_parser_;
	::xml_schema::string_pskel* Second_parser_;
	::xml_schema::string_pskel* Third_parser_;
	::xml_schema::string_pskel* Value_parser_;
	::xml_schema::string_pskel* StdDev_parser_;
	::xml_schema::string_pskel* InstHeight_parser_;
	::xml_schema::string_pskel* TargHeight_parser_;
	::xml_schema::string_pskel* Total_parser_;
	::Directions_pskel* Directions_parser_;
	::xml_schema::string_pskel* Vscale_parser_;
	::xml_schema::string_pskel* Epoch_parser_;
	::xml_schema::string_pskel* ReferenceFrame_parser_;
	::GPSBaseline_pskel* GPSBaseline_parser_;
	::xml_schema::string_pskel* Hscale_parser_;
	::xml_schema::string_pskel* Lscale_parser_;
	::xml_schema::string_pskel* Pscale_parser_;
	::Clusterpoint_pskel* Clusterpoint_parser_;
	::xml_schema::string_pskel* Coords_parser_;
	::xml_schema::string_pskel* Source_parser_;
	::xml_schema::string_pskel* MeasurementDBID_parser_;
	::xml_schema::string_pskel* ClusterDBID_parser_;

	// pointer to Measurements vector
	vdnaMsrPtr*	_vParentMsrs;
	dnaMsrPtr	_dnaCurrentMsr;

	PUINT32		_pMeasurementCount;
	PUINT32		_pclusterID;
	string		_epoch;
	string		_referenceframe;
	bool		_overridereferenceframe;

	bool		_preferSingleXasG;
};

class DnaStation_pskel: public ::xml_schema::complex_content
{
public:
	// Parser callbacks. Override them in your implementation.
	//
	// virtual void
	// pre ();

	virtual void Name (const ::std::string&);
	virtual void Constraints (const ::std::string&);
	virtual void Type (const ::std::string&);
	virtual void StationCoord ();
	virtual void Description (const ::std::string&);
	virtual void post_DnaStation ();

	// Initialisation
	inline void InitparentStnVector(vdnaStnPtr* pStns)
	{
		_vParentStns = pStns;
	}

	inline void SetDefaultReferenceFrame(string& referenceframe) { 
		_referenceframe = referenceframe;
	}

	inline void SetDefaultEpoch(string& epoch) { 
		_epoch = epoch; 
	}

	// Retrieval
	inline std::string Name()
	{
		return Name_parser_->post_string();
	}

	inline std::string Constraints()
	{
		return Constraints_parser_->post_string();
	}

	inline std::string Type()
	{
		return Type_parser_->post_string();
	}

	inline std::string Description()
	{
		return Description_parser_->post_string();
	}

	inline StationCoord_pskel& Coordinates()
	{
		return *StationCoord_parser_;
	}


	// Parser construction API.
	//
	void Name_parser (::xml_schema::string_pskel&);
	void Constraints_parser (::xml_schema::string_pskel&);
	void Type_parser (::xml_schema::string_pskel&);
	void StationCoord_parser (::StationCoord_pskel&);
	void Description_parser (::xml_schema::string_pskel&);

	void parsers (::xml_schema::string_pskel& /* Name */,
		::xml_schema::string_pskel& /* Constraints */,
		::xml_schema::string_pskel& /* Type */,
		::StationCoord_pskel& /* StationCoord */,
		::xml_schema::string_pskel& /* Description */);

	// Constructor.
	//
	DnaStation_pskel ();

	// Implementation.
	//
protected:
	virtual bool
		_start_element_impl (const ::xml_schema::ro_string&,
		const ::xml_schema::ro_string&,
		const ::xml_schema::ro_string*);

	virtual bool
		_end_element_impl (const ::xml_schema::ro_string&,
		const ::xml_schema::ro_string&);

protected:
	::xml_schema::string_pskel* Name_parser_;
	::xml_schema::string_pskel* Constraints_parser_;
	::xml_schema::string_pskel* Type_parser_;
	::StationCoord_pskel* StationCoord_parser_;
	::xml_schema::string_pskel* Description_parser_;

protected:
	vdnaStnPtr* _vParentStns;
	dnaStnPtr _dnaCurrentStn;

	string		_epoch;
	string		_referenceframe;
};

class DnaXmlFormat_pskel: public ::xml_schema::complex_content
{
public:
	// Parser callbacks. Override them in your implementation.
	//
	// virtual void
	// pre ();

	virtual void DnaStation ();
	virtual void DnaMeasurement ();
	virtual void type ();
	virtual void referenceframe ();
	virtual void epoch ();
	virtual void post_DnaXmlFormat ();

	// Parser construction API.
	//
	void DnaStation_parser (::DnaStation_pskel&);
	void DnaMeasurement_parser (::DnaMeasurement_pskel&);
	void type_parser (::type_pskel&);
	void referenceframe_parser (::referenceframe_pskel&);
	void epoch_parser (::epoch_pskel&);

	void parsers (::DnaStation_pskel& /* DnaStation */,
		::DnaMeasurement_pskel& /* DnaMeasurement */,
		::type_pskel& /* type */,
		::referenceframe_pskel& /* referenceframe */,
		::epoch_pskel& /* epoch */);

	// Constructor.
	//
	DnaXmlFormat_pskel ();

	// Implementation.
	//
protected:
	virtual bool
		_start_element_impl (const ::xml_schema::ro_string&,
		const ::xml_schema::ro_string&,
		const ::xml_schema::ro_string*);

	virtual bool
		_end_element_impl (const ::xml_schema::ro_string&,
		const ::xml_schema::ro_string&);

	virtual bool
		_attribute_impl (const ::xml_schema::ro_string&,
		const ::xml_schema::ro_string&,
		const ::xml_schema::ro_string&);

	inline vdnaStnPtr& StationList()
	{
		return *_pStns;
	}

	inline vdnaMsrPtr& MeasurementList()
	{
		return *_pMsrs;
	}

protected:
	::DnaStation_pskel* DnaStation_parser_;
	::DnaMeasurement_pskel* DnaMeasurement_parser_;
	::type_pskel* type_parser_;
	::referenceframe_pskel* referenceframe_parser_;
	::epoch_pskel* epoch_parser_;

	vdnaStnPtr* _pStns;
	vdnaMsrPtr* _pMsrs;

	UINT32 _clusterID;
	UINT32 _measurement_count;
	UINT32 _station_count;
	string _referenceframe;
	string _epoch;
	bool _userspecifiedreferenceframe;
	bool _overridereferenceframe;
};

class GPSBaseline_pskel: public ::xml_schema::complex_content
{
public:
	// Parser callbacks. Override them in your implementation.
	//
	// virtual void
	// pre ();

	virtual void X (const ::std::string&);
	virtual void Y (const ::std::string&);
	virtual void Z (const ::std::string&);
	virtual void MeasurementDBID (const ::std::string&);
	virtual void SigmaXX (const ::std::string&);
	virtual void SigmaXY (const ::std::string&);
	virtual void SigmaXZ (const ::std::string&);
	virtual void SigmaYY (const ::std::string&);
	virtual void SigmaYZ (const ::std::string&);
	virtual void SigmaZZ (const ::std::string&);
	virtual void GPSCovariance ();
	virtual void post_GPSBaseline ();

	// Parser construction API.
	//
	void X_parser (::xml_schema::string_pskel&);
	void Y_parser (::xml_schema::string_pskel&);
	void Z_parser (::xml_schema::string_pskel&);
	void MeasurementDBID_parser (::xml_schema::string_pskel&);
	void SigmaXX_parser (::xml_schema::string_pskel&);
	void SigmaXY_parser (::xml_schema::string_pskel&);
	void SigmaXZ_parser (::xml_schema::string_pskel&);
	void SigmaYY_parser (::xml_schema::string_pskel&);
	void SigmaYZ_parser (::xml_schema::string_pskel&);
	void SigmaZZ_parser (::xml_schema::string_pskel&);
	void GPSCovariance_parser (::GPSCovariance_pskel&);

	void parsers (
			::xml_schema::string_pskel& /* X */,
			::xml_schema::string_pskel& /* Y */,
			::xml_schema::string_pskel& /* Z */,
			::xml_schema::string_pskel& /* MeasurementDBID */,
			::xml_schema::string_pskel& /* SigmaXX */,
			::xml_schema::string_pskel& /* SigmaXY */,
			::xml_schema::string_pskel& /* SigmaXZ */,
			::xml_schema::string_pskel& /* SigmaYY */,
			::xml_schema::string_pskel& /* SigmaYZ */,
			::xml_schema::string_pskel& /* SigmaZZ */,
			::GPSCovariance_pskel& /* GPSCovariance */);

	// Constructor.
	//
	GPSBaseline_pskel ();

	// Initialisation
	inline void InitparentGpsBaselineCluster(dnaMsrPtr pGpsBaselineCluster) { _parent_dnaGpsBaselineCluster = pGpsBaselineCluster; }
	inline void InitparentMsrCounter(PUINT32 pMsrCounter) {	_pMeasurementCount = pMsrCounter; }

	// Implementation.
	//
protected:
	virtual bool
		_start_element_impl (const ::xml_schema::ro_string&,
		const ::xml_schema::ro_string&,
		const ::xml_schema::ro_string*);

	virtual bool
		_end_element_impl (const ::xml_schema::ro_string&,
		const ::xml_schema::ro_string&);

protected:
	::xml_schema::string_pskel* X_parser_;
	::xml_schema::string_pskel* Y_parser_;
	::xml_schema::string_pskel* Z_parser_;
	::xml_schema::string_pskel* MeasurementDBID_parser_;
	::xml_schema::string_pskel* SigmaXX_parser_;
	::xml_schema::string_pskel* SigmaXY_parser_;
	::xml_schema::string_pskel* SigmaXZ_parser_;
	::xml_schema::string_pskel* SigmaYY_parser_;
	::xml_schema::string_pskel* SigmaYZ_parser_;
	::xml_schema::string_pskel* SigmaZZ_parser_;
	::GPSCovariance_pskel* GPSCovariance_parser_;

	dnaMsrPtr _dnaGpsBaseline;
	dnaMsrPtr _parent_dnaGpsBaselineCluster;
	PUINT32 _pMeasurementCount;
};

class GPSCovariance_pskel: public ::xml_schema::complex_content
{
public:
	// Parser callbacks. Override them in your implementation.
	//
	// virtual void
	// pre ();

	virtual void m11 (const ::std::string&);
	virtual void m12 (const ::std::string&);
	virtual void m13 (const ::std::string&);
	virtual void m21 (const ::std::string&);
	virtual void m22 (const ::std::string&);
	virtual void m23 (const ::std::string&);
	virtual void m31 (const ::std::string&);
	virtual void m32 (const ::std::string&);
	virtual void m33 (const ::std::string&);
	virtual void post_GPSCovariance ();

	// Parser construction API.
	//
	void m11_parser (::xml_schema::string_pskel&);
	void m12_parser (::xml_schema::string_pskel&);
	void m13_parser (::xml_schema::string_pskel&);
	void m21_parser (::xml_schema::string_pskel&);
	void m22_parser (::xml_schema::string_pskel&);
	void m23_parser (::xml_schema::string_pskel&);
	void m31_parser (::xml_schema::string_pskel&);
	void m32_parser (::xml_schema::string_pskel&);
	void m33_parser (::xml_schema::string_pskel&);

	void parsers (::xml_schema::string_pskel& /* m11 */,
		::xml_schema::string_pskel& /* m12 */,
		::xml_schema::string_pskel& /* m13 */,
		::xml_schema::string_pskel& /* m21 */,
		::xml_schema::string_pskel& /* m22 */,
		::xml_schema::string_pskel& /* m23 */,
		::xml_schema::string_pskel& /* m31 */,
		::xml_schema::string_pskel& /* m32 */,
		::xml_schema::string_pskel& /* m33 */);

	// Constructor.
	//
	GPSCovariance_pskel ();

	// Initialisation
	inline void InitparentGpsBaseline(dnaMsrPtr pGpsBaseline)
	{
		_parent_dnaGpsBaseline = pGpsBaseline;
	}
	;

	// Implementation.
	//
protected:
	virtual bool
		_start_element_impl (const ::xml_schema::ro_string&,
		const ::xml_schema::ro_string&,
		const ::xml_schema::ro_string*);

	virtual bool
		_end_element_impl (const ::xml_schema::ro_string&,
		const ::xml_schema::ro_string&);

protected:
	::xml_schema::string_pskel* m11_parser_;
	::xml_schema::string_pskel* m12_parser_;
	::xml_schema::string_pskel* m13_parser_;
	::xml_schema::string_pskel* m21_parser_;
	::xml_schema::string_pskel* m22_parser_;
	::xml_schema::string_pskel* m23_parser_;
	::xml_schema::string_pskel* m31_parser_;
	::xml_schema::string_pskel* m32_parser_;
	::xml_schema::string_pskel* m33_parser_;

	dnaCovariancePtr _dnaGpsCovariance;
	dnaMsrPtr _parent_dnaGpsBaseline;
};

class Height_pskel: public virtual ::xml_schema::string_pskel
{
public:
	// Parser callbacks. Override them in your implementation.
	//
	// virtual void 
	// pre ();

	virtual void system(const ::std::string&);
	virtual void post_Height();

	// Parser construction API.
	//
	void system_parser(::xml_schema::string_pskel&);
	void parsers(::system_pskel& /* system */);

	// Constructor.
	//
	Height_pskel ();

	// Initialisation
	inline void InitparentStn(dnaStnPtr pStn) {	_parent_dnaStn = pStn; }

	// Implementation.
	//
protected:
	virtual bool _attribute_impl (const ::xml_schema::ro_string&,
		const ::xml_schema::ro_string&, const ::xml_schema::ro_string&);

protected:
	::xml_schema::string_pskel* system_parser_;

	dnaStnPtr _parent_dnaStn;
};	// class Height_pskel: public virtual ::xml_schema::string_pskel

class PointCovariance_pskel: public ::xml_schema::complex_content
{
public:
	// Parser callbacks. Override them in your implementation.
	//
	// virtual void
	// pre ();

	virtual void m11 (const ::std::string&);
	virtual void m12 (const ::std::string&);
	virtual void m13 (const ::std::string&);
	virtual void m21 (const ::std::string&);
	virtual void m22 (const ::std::string&);
	virtual void m23 (const ::std::string&);
	virtual void m31 (const ::std::string&);
	virtual void m32 (const ::std::string&);
	virtual void m33 (const ::std::string&);
	virtual void post_PointCovariance ();

	// Parser construction API.
	//
	void m11_parser (::xml_schema::string_pskel&);
	void m12_parser (::xml_schema::string_pskel&);
	void m13_parser (::xml_schema::string_pskel&);
	void m21_parser (::xml_schema::string_pskel&);
	void m22_parser (::xml_schema::string_pskel&);
	void m23_parser (::xml_schema::string_pskel&);
	void m31_parser (::xml_schema::string_pskel&);
	void m32_parser (::xml_schema::string_pskel&);
	void m33_parser (::xml_schema::string_pskel&);

	void parsers (::xml_schema::string_pskel& /* m11 */,
		::xml_schema::string_pskel& /* m12 */,
		::xml_schema::string_pskel& /* m13 */,
		::xml_schema::string_pskel& /* m21 */,
		::xml_schema::string_pskel& /* m22 */,
		::xml_schema::string_pskel& /* m23 */,
		::xml_schema::string_pskel& /* m31 */,
		::xml_schema::string_pskel& /* m32 */,
		::xml_schema::string_pskel& /* m33 */);

	// Constructor.
	//
	PointCovariance_pskel ();

	// Initialisation
	inline void InitparentGpsPoint(dnaMsrPtr pGpsPoint)
	{
		_parent_dnaGpsPoint = pGpsPoint;
	}
	;

	// Implementation.
	//
protected:
	virtual bool
		_start_element_impl (const ::xml_schema::ro_string&,
		const ::xml_schema::ro_string&,
		const ::xml_schema::ro_string*);

	virtual bool
		_end_element_impl (const ::xml_schema::ro_string&,
		const ::xml_schema::ro_string&);

protected:
	::xml_schema::string_pskel* m11_parser_;
	::xml_schema::string_pskel* m12_parser_;
	::xml_schema::string_pskel* m13_parser_;
	::xml_schema::string_pskel* m21_parser_;
	::xml_schema::string_pskel* m22_parser_;
	::xml_schema::string_pskel* m23_parser_;
	::xml_schema::string_pskel* m31_parser_;
	::xml_schema::string_pskel* m32_parser_;
	::xml_schema::string_pskel* m33_parser_;

	dnaCovariancePtr _dnaPointCovariance;
	dnaMsrPtr _parent_dnaGpsPoint;
};

class StationCoord_pskel: public ::xml_schema::complex_content
{
public:
	// Parser callbacks. Override them in your implementation.
	//
	// virtual void
	// pre ();

	virtual void Name (const ::std::string&);
	virtual void XAxis (const ::std::string&);
	virtual void YAxis (const ::std::string&);
	virtual void Height ();
	virtual void HemisphereZone (const ::std::string&);
	virtual void GeoidModel ();
	virtual void post_StationCoord ();

	// Parser construction API.
	//
	void Name_parser (::xml_schema::string_pskel&);
	void XAxis_parser (::xml_schema::string_pskel&);
	void YAxis_parser (::xml_schema::string_pskel&);
	void Height_parser (::Height_pskel&);
	void HemisphereZone_parser (::xml_schema::string_pskel&);
	void GeoidModel_parser(::GeoidModel_pskel&);

	void parsers(::xml_schema::string_pskel& /* Name */,
		::xml_schema::string_pskel& /* XAxis */,
		::xml_schema::string_pskel& /* YAxis */,
		::Height_pskel& /* Height */,
		::xml_schema::string_pskel& /* HemisphereZone */,
		::GeoidModel_pskel& /* GeoidModel */);

	// Constructor.
	//
	StationCoord_pskel ();

	// Initialisation
	inline void InitparentStn(dnaStnPtr pStn) {	_parent_dnaStn = pStn; }

	// Implementation.
	//
protected:
	virtual bool
		_start_element_impl (const ::xml_schema::ro_string&,
		const ::xml_schema::ro_string&,
		const ::xml_schema::ro_string*);

	virtual bool
		_end_element_impl (const ::xml_schema::ro_string&,
		const ::xml_schema::ro_string&);

protected:
	::xml_schema::string_pskel* Name_parser_;
	::xml_schema::string_pskel* XAxis_parser_;
	::xml_schema::string_pskel* YAxis_parser_;
	::Height_pskel* Height_parser_;
	::xml_schema::string_pskel* HemisphereZone_parser_;
	::GeoidModel_pskel* GeoidModel_parser_;

	dnaStnPtr _parent_dnaStn;
};

class GeoidModel_pskel: public ::xml_schema::complex_content
{
public:
	// Parser callbacks. Override them in your implementation.
	//
	// virtual void 
	// pre ();

	virtual void NValue (const ::std::string&);
	virtual void DeflPM (const ::std::string&);
	virtual void DeflPV (const ::std::string&);
	virtual void post_GeoidModel ();

	// Parser construction API.
	//
	void NValue_parser (::xml_schema::string_pskel&);
	void DeflPM_parser (::xml_schema::string_pskel&);
	void DeflPV_parser (::xml_schema::string_pskel&);
	void parsers (::xml_schema::string_pskel& /* NValue */,
		::xml_schema::string_pskel& /* DeflPM */,
		::xml_schema::string_pskel& /* DeflPV */);

	// Constructor.
	//
	GeoidModel_pskel ();

	// Implementation.
	//
protected:
	virtual bool _start_element_impl (const ::xml_schema::ro_string&,
		const ::xml_schema::ro_string&, const ::xml_schema::ro_string*);

	virtual bool _end_element_impl (const ::xml_schema::ro_string&,
		const ::xml_schema::ro_string&);

protected:
	::xml_schema::string_pskel* NValue_parser_;
	::xml_schema::string_pskel* DeflPM_parser_;
	::xml_schema::string_pskel* DeflPV_parser_;
};

class type_pskel: public virtual ::xml_schema::string_pskel
{
public:
	// Parser callbacks. Override them in your implementation.
	//
	// virtual void
	// pre ();

	virtual void post_type ();
};

class referenceframe_pskel: public virtual ::xml_schema::string_pskel
{
public:
	// Parser callbacks. Override them in your implementation.
	//
	// virtual void
	// pre ();

	virtual void post_type (string& referenceframe, bool user_specified, bool overridereferenceframe);
};

class epoch_pskel: public virtual ::xml_schema::string_pskel
{
public:
	// Parser callbacks. Override them in your implementation.
	//
	// virtual void
	// pre ();

	virtual void post_type (string& epoch, bool user_specified, bool overridereferenceframe);
};

class system_pskel: public virtual ::xml_schema::string_pskel
{
public:
	// Parser callbacks. Override them in your implementation.
	//
	// virtual void 
	// pre ();

	virtual void post_system ();
};

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // DYNA_ML_PSKEL_HXX
